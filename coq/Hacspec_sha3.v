(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Open Scope hacspec_scope.

(** Should be moved to Hacspec_Lib.v **)
     Definition int_xI {WS : WORDSIZE} (a : int) : int := MachineIntegers.add (MachineIntegers.mul a (repr 2)) MachineIntegers.one.
Definition int_xO {WS : WORDSIZE} (a : int) : int := MachineIntegers.mul a (repr 2).
Number Notation int Pos.of_num_int Pos.to_num_int (via positive mapping [[int_xI] => xI, [int_xO] => xO , [MachineIntegers.one] => xH]) : hacspec_scope.
Notation "0" := (repr O).
Notation U8_t := int8.
Notation U8 := id.
Notation U16_t := int16.
Notation U16 := id.
Notation U32_t := int32.
Notation U32 := id.
Notation U64_t := int64.
Notation U64 := id.
Notation U128_t := int128.
Notation U128 := id.

Definition array_index {A: Type} `{Default A} {len : nat} (s: nseq A len) {WS} (i : @int WS) := array_index s (unsigned i).
Notation " x .[ a ]" := (array_index x a) (at level 40).
Definition array_upd {A: Type} {len : nat} (s: nseq A len) {WS} (i: @int WS) (new_v: A) : nseq A len := array_upd s (unsigned i) new_v.
Notation " x .[ i ]<- a" := (array_upd x i a) (at level 40).

Class Addition A := add : A -> A -> A.
Notation "a .+ b" := (add a b).
Instance array_add_inst {ws : WORDSIZE} {len: nat} : Addition (nseq (@int ws) len) := { add a b := a array_add b }.
Instance int_add_inst {ws : WORDSIZE} : Addition (@int ws) := { add a b := MachineIntegers.add a b }.

Class Subtraction A := sub : A -> A -> A.
Notation "a .- b" := (sub a b).
Instance array_sub_inst {ws : WORDSIZE} {len: nat} : Subtraction (nseq (@int ws) len) := { sub := array_join_map MachineIntegers.sub }.
Instance int_sub_inst {ws : WORDSIZE} : Subtraction (@int ws) := { sub a b := MachineIntegers.sub a b }.

Class Multiplication A := mul : A -> A -> A.
Notation "a .* b" := (mul a b).
Instance array_mul_inst {ws : WORDSIZE} {len: nat} : Multiplication (nseq (@int ws) len) := { mul a b := a array_mul b }.
Instance int_mul_inst {ws : WORDSIZE} : Multiplication (@int ws) := { mul a b := MachineIntegers.mul a b }.

Class Xor A := xor : A -> A -> A.
Notation "a .^ b" := (xor a b).

Instance array_xor_inst {ws : WORDSIZE} {len: nat} : Xor (nseq (@int ws) len) := { xor a b := a array_xor b }.
Instance int_xor_inst {ws : WORDSIZE} : Xor (@int ws) := { xor a b := MachineIntegers.xor a b }.

Definition new {A : Type} `{Default A} {len} : nseq A len := array_new_ default _.
Class array_or_seq A len :=
{ as_seq : seq A ; as_nseq : nseq A len }.

Arguments as_seq {_} {_} array_or_seq.
Arguments as_nseq {_} {_} array_or_seq.
Coercion as_seq : array_or_seq >-> seq.
Coercion as_nseq : array_or_seq >-> nseq.

Instance nseq_array_or_seq {A len} (a : nseq A len) : array_or_seq A len :=
{ as_seq := array_to_seq a ; as_nseq := a ; }.
Coercion nseq_array_or_seq : nseq >-> array_or_seq.

Instance seq_array_or_seq {A} `{Default A} (a : seq A) : array_or_seq A (length a) :=
{ as_seq := a ; as_nseq := array_from_seq _ a ; }.
Coercion seq_array_or_seq : seq >-> array_or_seq.

Definition update {A : Type}  `{Default A} {len slen} (s : nseq A len) {WS} (start : @int WS) (start_a : array_or_seq A slen) : nseq A len :=
array_update (a := A) (len := len) s (unsigned start) (as_seq start_a).

Definition to_le_U32s {A l} := array_to_le_uint32s (A := A) (l := l).
Axiom to_le_bytes : forall {ws : WORDSIZE} {len}, nseq (@int ws) len -> seq int8.
Definition from_seq {A : Type}  `{Default A} {len slen} (s : array_or_seq A slen) : nseq A len := array_from_seq _ (as_seq s).

Notation Seq_t := seq.
Notation len := (fun s => seq_len s : int32).

Definition array_slice {a: Type} `{Default a} {len : nat} (input: nseq a len) {WS} (start: @int WS) (slice_len: @int WS) : seq a := slice (array_to_seq input) (unsigned start) (unsigned (start .+ slice_len)).
Notation slice := array_slice.
Definition seq_new {A: Type} `{Default A} {WS} (len: @int WS) : seq A := seq_new (unsigned len).
Notation new_seq := seq_new.
Notation num_exact_chunks := seq_num_exact_chunks.
Notation get_exact_chunk := seq_get_exact_chunk.
Definition set_chunk {a: Type} `{Default a} {len} (s: seq a) {WS} (chunk_len: @int WS) (chunk_num: @int WS) (chunk: array_or_seq a len) : seq a := seq_set_chunk s (unsigned chunk_len) (unsigned chunk_num) (as_seq chunk).
Definition set_exact_chunk {a} `{H : Default a} {len} s {WS} := @set_chunk a H len s WS.
     Notation get_remainder_chunk := seq_get_remainder_chunk.
Notation "a <> b" := (negb (eqb a b)).

Notation from_secret_literal := nat_mod_from_secret_literal.
Definition pow2 {m} (x : @int WORDSIZE32) := nat_mod_pow2 m (unsigned x).
Instance nat_mod_addition {n} : Addition (nat_mod n) := { add a b := a +% b }.
Instance nat_mod_subtraction {n} : Subtraction (nat_mod n) := { sub a b := a -% b }.
Instance nat_mod_multiplication {n} : Multiplication (nat_mod n) := { mul a b := a *% b }.
Definition from_slice {a: Type} `{Default a} {len slen} (x : array_or_seq a slen) {WS} (start: @int WS) (slice_len: @int WS) := array_from_slice default len (as_seq x) (unsigned start) (unsigned slice_len).
Notation zero := nat_mod_zero.
Notation to_byte_seq_le := nat_mod_to_byte_seq_le.
Notation U128_to_le_bytes := u128_to_le_bytes.
Notation from_byte_seq_le := nat_mod_from_byte_seq_le.
Definition from_literal {m} := nat_mod_from_literal m.
Notation inv := nat_mod_inv.
Notation update_start := array_update_start.
Notation pow := nat_mod_pow_self.
Notation bit := nat_mod_bit.

Definition int_to_int {ws1 ws2} (i : @int ws1) : @int ws2 := repr (unsigned i).
Coercion int_to_int : int >-> int.
Notation push := seq_push.
Notation Build_secret := secret.
Notation "a -Ã— b" :=
(prod a b) (at level 80, right associativity) : hacspec_scope.
Notation Result_t := (fun '(x,y) => result).
Axiom TODO_name : Type.
Notation ONE := nat_mod_one.
Notation exp := nat_mod_exp.
Notation nat_mod := GZnZ.znz.
Instance nat_mod_znz_addition {n} : Addition (GZnZ.znz n) := { add a b := a +% b }.
Instance nat_mod_znz_subtraction {n} : Subtraction (GZnZ.znz n) := { sub a b := a -% b }.
Instance nat_mod_znz_multiplication {n} : Multiplication (GZnZ.znz n) := { mul a b := a *% b }.
Notation TWO := nat_mod_two.
Notation ne := (fun x y => negb (eqb x y)).
Notation eq := (eqb).
Notation rotate_right := (ror).
Notation to_be_U32s := array_to_be_uint32s.
Notation get_chunk := seq_get_chunk.
Notation num_chunks := seq_num_chunks.
Notation U64_to_be_bytes := uint64_to_be_bytes.
Notation to_be_bytes := array_to_be_bytes.
Notation U8_from_usize := uint8_from_usize.
Notation concat := seq_concat.
Notation declassify := id.
Notation U128_from_be_bytes := uint128_from_be_bytes.
Notation U128_to_be_bytes := uint128_to_be_bytes.
Notation slice_range := array_slice_range.
Notation truncate := seq_truncate.
Axiom array_to_be_uint64s : forall {A l}, nseq A l -> seq uint64.
Notation to_be_U64s := array_to_be_uint64s.
Notation classify := id.
Notation U64_from_U8 := uint64_from_uint8.
Fixpoint Build_Range_t (a b : nat) := match (b - a)%nat with O => [] | S n => match b with | O => [] | S b' => Build_Range_t a b' ++ [b] end end.
(** end of: Should be moved to Hacspec_Lib.v **)


(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

Definition ROUNDS : int32 :=
  (@repr WORDSIZE32 24).

Definition SHA3224_RATE : int32 :=
  (@repr WORDSIZE32 144).

Definition SHA3256_RATE : int32 :=
  (@repr WORDSIZE32 136).

Definition SHA3384_RATE : int32 :=
  (@repr WORDSIZE32 104).

Definition SHA3512_RATE : int32 :=
  (@repr WORDSIZE32 72).

Definition SHAKE128_RATE : int32 :=
  (@repr WORDSIZE32 168).

Definition SHAKE256_RATE : int32 :=
  (@repr WORDSIZE32 136).

Notation State_t := (nseq int64 25).
Definition State : State_t -> State_t :=
  id.

Notation Row_t := (nseq int64 5).
Definition Row : Row_t -> Row_t :=
  id.

Notation Digest224_t := (nseq int8 28).
Definition Digest224 : Digest224_t -> Digest224_t :=
  id.

Notation Digest256_t := (nseq int8 32).
Definition Digest256 : Digest256_t -> Digest256_t :=
  id.

Notation Digest384_t := (nseq int8 48).
Definition Digest384 : Digest384_t -> Digest384_t :=
  id.

Notation Digest512_t := (nseq int8 64).
Definition Digest512 : Digest512_t -> Digest512_t :=
  id.

Notation RoundConstants_t := (nseq int32 ROUNDS).
Definition RoundConstants : RoundConstants_t -> RoundConstants_t :=
  id.

Notation RotationConstants_t := (nseq int32 25).
Definition RotationConstants : RotationConstants_t -> RotationConstants_t :=
  id.

Definition ROUNDCONSTANTS : RoundConstants_t :=
  RoundConstants (array_from_list _ [(@repr WORDSIZE64 1);(@repr WORDSIZE64 32898);(@repr WORDSIZE64 9223372036854808714);(@repr WORDSIZE64 9223372039002292224);(@repr WORDSIZE64 32907);(@repr WORDSIZE64 2147483649);(@repr WORDSIZE64 9223372039002292353);(@repr WORDSIZE64 9223372036854808585);(@repr WORDSIZE64 138);(@repr WORDSIZE64 136);(@repr WORDSIZE64 2147516425);(@repr WORDSIZE64 2147483658);(@repr WORDSIZE64 2147516555);(@repr WORDSIZE64 9223372036854775947);(@repr WORDSIZE64 9223372036854808713);(@repr WORDSIZE64 9223372036854808579);(@repr WORDSIZE64 9223372036854808578);(@repr WORDSIZE64 9223372036854775936);(@repr WORDSIZE64 32778);(@repr WORDSIZE64 9223372039002259466);(@repr WORDSIZE64 9223372039002292353);(@repr WORDSIZE64 9223372036854808704);(@repr WORDSIZE64 2147483649);(@repr WORDSIZE64 9223372039002292232)]).

Definition ROTC : RotationConstants_t :=
  RotationConstants (array_from_list _ [(@repr WORDSIZE32 0);(@repr WORDSIZE32 1);(@repr WORDSIZE32 62);(@repr WORDSIZE32 28);(@repr WORDSIZE32 27);(@repr WORDSIZE32 36);(@repr WORDSIZE32 44);(@repr WORDSIZE32 6);(@repr WORDSIZE32 55);(@repr WORDSIZE32 20);(@repr WORDSIZE32 3);(@repr WORDSIZE32 10);(@repr WORDSIZE32 43);(@repr WORDSIZE32 25);(@repr WORDSIZE32 39);(@repr WORDSIZE32 41);(@repr WORDSIZE32 45);(@repr WORDSIZE32 15);(@repr WORDSIZE32 21);(@repr WORDSIZE32 8);(@repr WORDSIZE32 18);(@repr WORDSIZE32 2);(@repr WORDSIZE32 61);(@repr WORDSIZE32 56);(@repr WORDSIZE32 14)]).

Definition PI : RotationConstants_t :=
  RotationConstants (array_from_list _ [(@repr WORDSIZE32 0);(@repr WORDSIZE32 6);(@repr WORDSIZE32 12);(@repr WORDSIZE32 18);(@repr WORDSIZE32 24);(@repr WORDSIZE32 3);(@repr WORDSIZE32 9);(@repr WORDSIZE32 10);(@repr WORDSIZE32 16);(@repr WORDSIZE32 22);(@repr WORDSIZE32 1);(@repr WORDSIZE32 7);(@repr WORDSIZE32 13);(@repr WORDSIZE32 19);(@repr WORDSIZE32 20);(@repr WORDSIZE32 4);(@repr WORDSIZE32 5);(@repr WORDSIZE32 11);(@repr WORDSIZE32 17);(@repr WORDSIZE32 23);(@repr WORDSIZE32 2);(@repr WORDSIZE32 8);(@repr WORDSIZE32 14);(@repr WORDSIZE32 15);(@repr WORDSIZE32 21)]).

Definition theta (s : State_t) : State_t :=
  let b := new : Row_t in
  let b := foldi (@repr WORDSIZE32 0) (@repr WORDSIZE32 5) (fun i b =>
      b.[i]<-(((((s.[i]).^(s.[(i.+(@repr WORDSIZE32 5))])).^(s.[(i.+(@repr WORDSIZE32 10))])).^(s.[(i.+(@repr WORDSIZE32 15))])).^(s.[(i.+(@repr WORDSIZE32 20))]))) b : Row_t in
  let s := foldi (@repr WORDSIZE32 0) (@repr WORDSIZE32 5) (fun i s =>
      let u := b.[((i.+(@repr WORDSIZE32 1)).%(@repr WORDSIZE32 5))] : U64_t in
      let t := (b.[((i.+(@repr WORDSIZE32 4)).%(@repr WORDSIZE32 5))]).^(rol u (@repr WORDSIZE32 1)) : U64_t in
      foldi (@repr WORDSIZE32 0) (@repr WORDSIZE32 5) (fun j s =>
        s.[(((@repr WORDSIZE32 5).*j).+i)]<-((s.[(((@repr WORDSIZE32 5).*j).+i)]).^t)) s) s : State_t in
  s.

Definition rho (s : State_t) : State_t :=
  let s := foldi (@repr WORDSIZE32 0) (@repr WORDSIZE32 25) (fun i s =>
      let u := s.[i] : U64_t in
      s.[i]<-(rol u (ROTC.[i]))) s : State_t in
  s.

Definition pi (s : State_t) : State_t :=
  let v := new : State_t in
  foldi (@repr WORDSIZE32 0) (@repr WORDSIZE32 25) (fun i v =>
    v.[i]<-(s.[(PI.[i])])) v.

Definition chi (s : State_t) : State_t :=
  let b := new : Row_t in
  let '(b,s) := foldi (@repr WORDSIZE32 0) (@repr WORDSIZE32 5) (fun i '(b,s) =>
      let b := foldi (@repr WORDSIZE32 0) (@repr WORDSIZE32 5) (fun j b =>
          b.[j]<-(s.[(((@repr WORDSIZE32 5).*i).+j)])) b : Row_t in
      let s := foldi (@repr WORDSIZE32 0) (@repr WORDSIZE32 5) (fun j s =>
          let u := b.[((j.+(@repr WORDSIZE32 1)).%(@repr WORDSIZE32 5))] : U64_t in
          s.[(((@repr WORDSIZE32 5).*i).+j)]<-((s.[(((@repr WORDSIZE32 5).*i).+j)]).^((not u).&(b.[((j.+(@repr WORDSIZE32 2)).%(@repr WORDSIZE32 5))])))) s : State_t in
      (b,s)) (b,s) : (Row_t 'Ã— State_t) in
  s.

Definition iota (s : State_t) (rndconst : int64) : State_t :=
  let s := s.[(@repr WORDSIZE32 0)]<-((s.[(@repr WORDSIZE32 0)]).^(classify rndconst)) : State_t in
  s.

Definition keccakf1600 (s : State_t) : State_t :=
  let s := foldi (@repr WORDSIZE32 0) ROUNDS (fun i s =>
      let s := theta s : State_t in
      let s := rho s : State_t in
      let s := pi s : State_t in
      let s := chi s : State_t in
      iota s (ROUNDCONSTANTS.[i])) s : State_t in
  s.

Definition absorb_block (s : State_t) (block : Seq_t U8_t) : State_t :=
  let s := foldi (@repr WORDSIZE32 0) (len block) (fun i s =>
      let w := i shift_right (@repr WORDSIZE32 3) : int32 in
      let o := (@repr WORDSIZE32 8).*(i.&(@repr WORDSIZE32 7)) : int32 in
      s.[w]<-((s.[w]).^(shl (U64_from_U8 (block.[i])) o))) s : State_t in
  keccakf1600 s.

Definition squeeze (s : State_t) (nbytes : int32) (rate : int32) : Seq_t U8_t :=
  let out := new_seq nbytes : Seq_t U8_t in
  app global vcar projector tuple todo(term).

Definition keccak (rate : int32) (data : Seq_t U8_t) (p : int8) (outbytes : int32) : Seq_t U8_t :=
  let buf := new_seq rate : Seq_t U8_t in
  let last_block_len := (@repr WORDSIZE32 0) : int32 in
  let s := new : State_t in
  let '(buf,last_block_len,s) := foldi (@repr WORDSIZE32 0) (num_chunks data rate) (fun i '(buf,last_block_len,s) =>
      let '(block_len,block) := get_chunk data rate i : (int32 'Ã— Seq_t U8_t) in
      if
        block_len=.?rate
      then
        let s := absorb_block s block : State_t in
        (buf,last_block_len,s)
      else
        let buf := update_start buf block : Seq_t U8_t in
        let last_block_len := block_len : int32 in
        (buf,last_block_len,s)) (buf,last_block_len,s) : (Seq_t U8_t 'Ã— int32 'Ã— State_t) in
  let buf := buf.[last_block_len]<-(secret p) : Seq_t U8_t in
  let buf := buf.[(rate.-(@repr WORDSIZE32 1))]<-((buf.[(rate.-(@repr WORDSIZE32 1))]).|(secret (@repr WORDSIZE8 128))) : Seq_t U8_t in
  let s := absorb_block s buf : State_t in
  squeeze s outbytes rate.

Definition sha3224 (data : Seq_t U8_t) : Digest224_t :=
  let t := keccak SHA3224_RATE data (@repr WORDSIZE8 6) (@repr WORDSIZE32 28) : Seq_t U8_t in
  from_seq t.

Definition sha3256 (data : Seq_t U8_t) : Digest256_t :=
  let t := keccak SHA3256_RATE data (@repr WORDSIZE8 6) (@repr WORDSIZE32 32) : Seq_t U8_t in
  from_seq t.

Definition sha3384 (data : Seq_t U8_t) : Digest384_t :=
  let t := keccak SHA3384_RATE data (@repr WORDSIZE8 6) (@repr WORDSIZE32 48) : Seq_t U8_t in
  from_seq t.

Definition sha3512 (data : Seq_t U8_t) : Digest512_t :=
  let t := keccak SHA3512_RATE data (@repr WORDSIZE8 6) (@repr WORDSIZE32 64) : Seq_t U8_t in
  from_seq t.

Definition shake128 (data : Seq_t U8_t) (outlen : int32) : Seq_t U8_t :=
  keccak SHAKE128_RATE data (@repr WORDSIZE8 31) outlen.

Definition shake256 (data : Seq_t U8_t) (outlen : int32) : Seq_t U8_t :=
  keccak SHAKE256_RATE data (@repr WORDSIZE8 31) outlen.
