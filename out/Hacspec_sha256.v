(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

(*Not implemented yet? todo(item)*)

Require Import Hacspec_lib.

Definition BLOCK_SIZE : uint_size :=
  (@repr WORDSIZE32 64).

Definition LEN_SIZE : uint_size :=
  (@repr WORDSIZE32 8).

Definition K_SIZE : uint_size :=
  (@repr WORDSIZE32 64).

Definition HASH_SIZE : uint_size :=
  (@repr WORDSIZE32 256)./(@repr WORDSIZE32 8).

Notation Block_t := (nseq int8 BLOCK_SIZE).
Definition Block : Block_t -> Block_t :=
  id.

Notation OpTableType_t := (nseq int32 12).
Definition OpTableType : OpTableType_t -> OpTableType_t :=
  id.

Notation Sha256Digest_t := (nseq int8 HASH_SIZE).
Definition Sha256Digest : Sha256Digest_t -> Sha256Digest_t :=
  id.

Notation RoundConstantsTable_t := (nseq int32 K_SIZE).
Definition RoundConstantsTable : RoundConstantsTable_t -> RoundConstantsTable_t :=
  id.

Notation Hash_t := (nseq int32 8).
Definition Hash : Hash_t -> Hash_t :=
  id.

Definition ch (x : U32_t) (y : U32_t) (z : U32_t) : _ :=
  (x.&y).^((not x).&z).

Definition maj (x : U32_t) (y : U32_t) (z : U32_t) : _ :=
  (x.&y).^((x.&z).^(y.&z)).

Definition OP_TABLE : OpTableType_t :=
  OpTableType (array_from_list [(@repr WORDSIZE32 2);
    (@repr WORDSIZE32 13);
    (@repr WORDSIZE32 22);
    (@repr WORDSIZE32 6);
    (@repr WORDSIZE32 11);
    (@repr WORDSIZE32 25);
    (@repr WORDSIZE32 7);
    (@repr WORDSIZE32 18);
    (@repr WORDSIZE32 3);
    (@repr WORDSIZE32 17);
    (@repr WORDSIZE32 19);
    (@repr WORDSIZE32 10)]).

Definition K_TABLE : RoundConstantsTable_t :=
  RoundConstantsTable (array_from_list [secret (@repr WORDSIZE32 1116352408);
    secret (@repr WORDSIZE32 1899447441);
    secret (@repr WORDSIZE32 3049323471);
    secret (@repr WORDSIZE32 3921009573);
    secret (@repr WORDSIZE32 961987163);
    secret (@repr WORDSIZE32 1508970993);
    secret (@repr WORDSIZE32 2453635748);
    secret (@repr WORDSIZE32 2870763221);
    secret (@repr WORDSIZE32 3624381080);
    secret (@repr WORDSIZE32 310598401);
    secret (@repr WORDSIZE32 607225278);
    secret (@repr WORDSIZE32 1426881987);
    secret (@repr WORDSIZE32 1925078388);
    secret (@repr WORDSIZE32 2162078206);
    secret (@repr WORDSIZE32 2614888103);
    secret (@repr WORDSIZE32 3248222580);
    secret (@repr WORDSIZE32 3835390401);
    secret (@repr WORDSIZE32 4022224774);
    secret (@repr WORDSIZE32 264347078);
    secret (@repr WORDSIZE32 604807628);
    secret (@repr WORDSIZE32 770255983);
    secret (@repr WORDSIZE32 1249150122);
    secret (@repr WORDSIZE32 1555081692);
    secret (@repr WORDSIZE32 1996064986);
    secret (@repr WORDSIZE32 2554220882);
    secret (@repr WORDSIZE32 2821834349);
    secret (@repr WORDSIZE32 2952996808);
    secret (@repr WORDSIZE32 3210313671);
    secret (@repr WORDSIZE32 3336571891);
    secret (@repr WORDSIZE32 3584528711);
    secret (@repr WORDSIZE32 113926993);
    secret (@repr WORDSIZE32 338241895);
    secret (@repr WORDSIZE32 666307205);
    secret (@repr WORDSIZE32 773529912);
    secret (@repr WORDSIZE32 1294757372);
    secret (@repr WORDSIZE32 1396182291);
    secret (@repr WORDSIZE32 1695183700);
    secret (@repr WORDSIZE32 1986661051);
    secret (@repr WORDSIZE32 2177026350);
    secret (@repr WORDSIZE32 2456956037);
    secret (@repr WORDSIZE32 2730485921);
    secret (@repr WORDSIZE32 2820302411);
    secret (@repr WORDSIZE32 3259730800);
    secret (@repr WORDSIZE32 3345764771);
    secret (@repr WORDSIZE32 3516065817);
    secret (@repr WORDSIZE32 3600352804);
    secret (@repr WORDSIZE32 4094571909);
    secret (@repr WORDSIZE32 275423344);
    secret (@repr WORDSIZE32 430227734);
    secret (@repr WORDSIZE32 506948616);
    secret (@repr WORDSIZE32 659060556);
    secret (@repr WORDSIZE32 883997877);
    secret (@repr WORDSIZE32 958139571);
    secret (@repr WORDSIZE32 1322822218);
    secret (@repr WORDSIZE32 1537002063);
    secret (@repr WORDSIZE32 1747873779);
    secret (@repr WORDSIZE32 1955562222);
    secret (@repr WORDSIZE32 2024104815);
    secret (@repr WORDSIZE32 2227730452);
    secret (@repr WORDSIZE32 2361852424);
    secret (@repr WORDSIZE32 2428436474);
    secret (@repr WORDSIZE32 2756734187);
    secret (@repr WORDSIZE32 3204031479);
    secret (@repr WORDSIZE32 3329325298)]).

Definition HASH_INIT : Hash_t :=
  Hash (array_from_list [secret (@repr WORDSIZE32 1779033703);
    secret (@repr WORDSIZE32 3144134277);
    secret (@repr WORDSIZE32 1013904242);
    secret (@repr WORDSIZE32 2773480762);
    secret (@repr WORDSIZE32 1359893119);
    secret (@repr WORDSIZE32 2600822924);
    secret (@repr WORDSIZE32 528734635);
    secret (@repr WORDSIZE32 1541459225)]).

Definition sigma (x : U32_t) (i : uint_size) (op : uint_size) : _ :=
  let tmp := (rotate_right x (OP_TABLE.[(((@repr WORDSIZE32 3).*i).+(@repr WORDSIZE32 2))])) : U32_t in
  let tmp := (if
      op=.?(@repr WORDSIZE32 0)
    then
      shr x (OP_TABLE.[(((@repr WORDSIZE32 3).*i).+(@repr WORDSIZE32 2))])
    else
      tmp) : _ in
  ((rotate_right x (OP_TABLE.[((@repr WORDSIZE32 3).*i)])).^(rotate_right x (OP_TABLE.[(((@repr WORDSIZE32 3).*i).+(@repr WORDSIZE32 1))]))).^tmp.

Definition schedule (block : Block_t) : RoundConstantsTable_t :=
  let b := (to_be_U32s block) : Seq_t U32_t in
  let s := (new) : RoundConstantsTable_t in
  let s := (fold (into_iter (Build_Range_t (@repr WORDSIZE32 0)K_SIZE)) s (fun i s =>
      if
        i<.?(@repr WORDSIZE32 16)
      then
        let s := (update_at s i (b.[i])) : RoundConstantsTable_t in
        s
      else
        let t16 := (s.[(i.-(@repr WORDSIZE32 16))]) : U32_t in
        let t15 := (s.[(i.-(@repr WORDSIZE32 15))]) : U32_t in
        let t7 := (s.[(i.-(@repr WORDSIZE32 7))]) : U32_t in
        let t2 := (s.[(i.-(@repr WORDSIZE32 2))]) : U32_t in
        let s1 := (sigma t2 (@repr WORDSIZE32 3) (@repr WORDSIZE32 0)) : U32_t in
        let s0 := (sigma t15 (@repr WORDSIZE32 2) (@repr WORDSIZE32 0)) : U32_t in
        let s := (update_at s i (((s1.+t7).+s0).+t16)) : RoundConstantsTable_t in
        s)) : RoundConstantsTable_t in
  s.

Definition shuffle (ws : RoundConstantsTable_t) (hashi : Hash_t) : Hash_t :=
  let h := (hashi) : Hash_t in
  let h := (fold (into_iter (Build_Range_t (@repr WORDSIZE32 0)K_SIZE)) h (fun i h =>
      let a0 := (h.[(@repr WORDSIZE32 0)]) : U32_t in
      let b0 := (h.[(@repr WORDSIZE32 1)]) : U32_t in
      let c0 := (h.[(@repr WORDSIZE32 2)]) : U32_t in
      let d0 := (h.[(@repr WORDSIZE32 3)]) : U32_t in
      let e0 := (h.[(@repr WORDSIZE32 4)]) : U32_t in
      let f0 := (h.[(@repr WORDSIZE32 5)]) : U32_t in
      let g0 := (h.[(@repr WORDSIZE32 6)]) : U32_t in
      let h0 := (h.[(@repr WORDSIZE32 7)]) : U32_t in
      let t1 := ((((h0.+(sigma e0 (@repr WORDSIZE32 1) (@repr WORDSIZE32 1))).+(ch e0 f0 g0)).+(K_TABLE.[i])).+(ws.[i])) : _ in
      let t2 := ((sigma a0 (@repr WORDSIZE32 0) (@repr WORDSIZE32 1)).+(maj a0 b0 c0)) : _ in
      let h := (update_at h (@repr WORDSIZE32 0) (t1.+t2)) : Hash_t in
      let h := (update_at h (@repr WORDSIZE32 1) a0) : Hash_t in
      let h := (update_at h (@repr WORDSIZE32 2) b0) : Hash_t in
      let h := (update_at h (@repr WORDSIZE32 3) c0) : Hash_t in
      let h := (update_at h (@repr WORDSIZE32 4) (d0.+t1)) : Hash_t in
      let h := (update_at h (@repr WORDSIZE32 5) e0) : Hash_t in
      let h := (update_at h (@repr WORDSIZE32 6) f0) : Hash_t in
      let h := (update_at h (@repr WORDSIZE32 7) g0) : Hash_t in
      h)) : Hash_t in
  h.

Definition compress (block : Block_t) (h_in : Hash_t) : Hash_t :=
  let s := (schedule block) : RoundConstantsTable_t in
  let h := (shuffle s h_in) : Hash_t in
  let h := (fold (into_iter (Build_Range_t (@repr WORDSIZE32 0)(@repr WORDSIZE32 8))) h (fun i h =>
      update_at h i ((h.[i]).+(h_in.[i])))) : Hash_t in
  h.

Definition hash (msg : Seq_t U8_t) : Sha256Digest_t :=
  let h := (HASH_INIT) : Hash_t in
  let last_block := (new) : Block_t in
  let last_block_len := ((@repr WORDSIZE32 0)) : uint_size in
  let '(h,last_block,last_block_len) := (fold (into_iter (Build_Range_t (@repr WORDSIZE32 0)(num_chunks msg BLOCK_SIZE))) (h,last_block,last_block_len) (fun i '(h,last_block,last_block_len) =>
      let '(block_len,block) := (get_chunk msg BLOCK_SIZE i) : (uint_size × Seq_t U8_t) in
      if
        block_len<.?BLOCK_SIZE
      then
        let last_block := (update_start new block) : Block_t in
        let last_block_len := (block_len) : uint_size in
        (h,last_block,last_block_len)
      else
        let compress_input := (from_seq block) : Block_t in
        let h := (compress compress_input h) : Hash_t in
        (h,last_block,last_block_len))) : (Hash_t × Block_t × uint_size) in
  let last_block := (update_at last_block last_block_len (secret (@repr WORDSIZE8 128))) : Block_t in
  let len_bist := (U64 (cast ((len msg).*(@repr WORDSIZE32 8)))) : U64_t in
  let '(h,last_block) := (if
      last_block_len<.?(BLOCK_SIZE.-LEN_SIZE)
    then
      let last_block := (update last_block (BLOCK_SIZE.-LEN_SIZE) (U64_to_be_bytes len_bist)) : Block_t in
      let h := (compress last_block h) : Hash_t in
      (h,last_block)
    else
      let pad_block := (new) : Block_t in
      let pad_block := (update pad_block (BLOCK_SIZE.-LEN_SIZE) (U64_to_be_bytes len_bist)) : Block_t in
      let h := (compress last_block h) : Hash_t in
      let h := (compress pad_block h) : Hash_t in
      (h,last_block)) : (Hash_t × Block_t) in
  from_seq (to_be_bytes h).

Definition sha256 (msg : Seq_t U8_t) : Sha256Digest_t :=
  hash msg.
