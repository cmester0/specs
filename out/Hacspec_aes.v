(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

(*Not implemented yet? todo(item)*)

Require Import Hacspec_lib.

Definition BLOCKSIZE : uint_size :=
  (@repr WORDSIZE32 16).

Definition IVSIZE : uint_size :=
  (@repr WORDSIZE32 12).

Definition KEY_LENGTH : uint_size :=
  (@repr WORDSIZE32 4).

Definition ROUNDS : uint_size :=
  (@repr WORDSIZE32 10).

Definition KEY_SCHEDULE_LENGTH : uint_size :=
  (@repr WORDSIZE32 176).

Definition ITERATIONS : uint_size :=
  (@repr WORDSIZE32 40).

Definition INVALID_KEY_EXPANSION_INDEX : int8 :=
  (@repr WORDSIZE8 1).

Notation Block_t := (nseq int8 BLOCKSIZE).
Definition Block : Block_t -> Block_t :=
  id.

Notation Word_t := (nseq int8 KEY_LENGTH).
Definition Word : Word_t -> Word_t :=
  id.

Notation RoundKey_t := (nseq int8 BLOCKSIZE).
Definition RoundKey : RoundKey_t -> RoundKey_t :=
  id.

Notation AesNonce_t := (nseq int8 IVSIZE).
Definition AesNonce : AesNonce_t -> AesNonce_t :=
  id.

Notation SBox_t := (nseq int8 256).
Definition SBox : SBox_t -> SBox_t :=
  id.

Notation RCon_t := (nseq int8 15).
Definition RCon : RCon_t -> RCon_t :=
  id.

Notation Bytes144_t := (nseq int8 144).
Definition Bytes144 : Bytes144_t -> Bytes144_t :=
  id.

Notation Bytes176_t := (nseq int8 KEY_SCHEDULE_LENGTH).
Definition Bytes176 : Bytes176_t -> Bytes176_t :=
  id.

Notation Key128_t := (nseq int8 BLOCKSIZE).
Definition Key128 : Key128_t -> Key128_t :=
  id.

Notation ByteSeqResult_t := (Result_t (Seq_t U8_t) (int8)).

Notation BlockResult_t := (Result_t (Block_t) (int8)).

Notation WordResult_t := (Result_t (Word_t) (int8)).

Definition SBOX : SBox_t :=
  SBox (array_from_list [secret (@repr WORDSIZE8 99);
    secret (@repr WORDSIZE8 124);
    secret (@repr WORDSIZE8 119);
    secret (@repr WORDSIZE8 123);
    secret (@repr WORDSIZE8 242);
    secret (@repr WORDSIZE8 107);
    secret (@repr WORDSIZE8 111);
    secret (@repr WORDSIZE8 197);
    secret (@repr WORDSIZE8 48);
    secret (@repr WORDSIZE8 1);
    secret (@repr WORDSIZE8 103);
    secret (@repr WORDSIZE8 43);
    secret (@repr WORDSIZE8 254);
    secret (@repr WORDSIZE8 215);
    secret (@repr WORDSIZE8 171);
    secret (@repr WORDSIZE8 118);
    secret (@repr WORDSIZE8 202);
    secret (@repr WORDSIZE8 130);
    secret (@repr WORDSIZE8 201);
    secret (@repr WORDSIZE8 125);
    secret (@repr WORDSIZE8 250);
    secret (@repr WORDSIZE8 89);
    secret (@repr WORDSIZE8 71);
    secret (@repr WORDSIZE8 240);
    secret (@repr WORDSIZE8 173);
    secret (@repr WORDSIZE8 212);
    secret (@repr WORDSIZE8 162);
    secret (@repr WORDSIZE8 175);
    secret (@repr WORDSIZE8 156);
    secret (@repr WORDSIZE8 164);
    secret (@repr WORDSIZE8 114);
    secret (@repr WORDSIZE8 192);
    secret (@repr WORDSIZE8 183);
    secret (@repr WORDSIZE8 253);
    secret (@repr WORDSIZE8 147);
    secret (@repr WORDSIZE8 38);
    secret (@repr WORDSIZE8 54);
    secret (@repr WORDSIZE8 63);
    secret (@repr WORDSIZE8 247);
    secret (@repr WORDSIZE8 204);
    secret (@repr WORDSIZE8 52);
    secret (@repr WORDSIZE8 165);
    secret (@repr WORDSIZE8 229);
    secret (@repr WORDSIZE8 241);
    secret (@repr WORDSIZE8 113);
    secret (@repr WORDSIZE8 216);
    secret (@repr WORDSIZE8 49);
    secret (@repr WORDSIZE8 21);
    secret (@repr WORDSIZE8 4);
    secret (@repr WORDSIZE8 199);
    secret (@repr WORDSIZE8 35);
    secret (@repr WORDSIZE8 195);
    secret (@repr WORDSIZE8 24);
    secret (@repr WORDSIZE8 150);
    secret (@repr WORDSIZE8 5);
    secret (@repr WORDSIZE8 154);
    secret (@repr WORDSIZE8 7);
    secret (@repr WORDSIZE8 18);
    secret (@repr WORDSIZE8 128);
    secret (@repr WORDSIZE8 226);
    secret (@repr WORDSIZE8 235);
    secret (@repr WORDSIZE8 39);
    secret (@repr WORDSIZE8 178);
    secret (@repr WORDSIZE8 117);
    secret (@repr WORDSIZE8 9);
    secret (@repr WORDSIZE8 131);
    secret (@repr WORDSIZE8 44);
    secret (@repr WORDSIZE8 26);
    secret (@repr WORDSIZE8 27);
    secret (@repr WORDSIZE8 110);
    secret (@repr WORDSIZE8 90);
    secret (@repr WORDSIZE8 160);
    secret (@repr WORDSIZE8 82);
    secret (@repr WORDSIZE8 59);
    secret (@repr WORDSIZE8 214);
    secret (@repr WORDSIZE8 179);
    secret (@repr WORDSIZE8 41);
    secret (@repr WORDSIZE8 227);
    secret (@repr WORDSIZE8 47);
    secret (@repr WORDSIZE8 132);
    secret (@repr WORDSIZE8 83);
    secret (@repr WORDSIZE8 209);
    secret (@repr WORDSIZE8 0);
    secret (@repr WORDSIZE8 237);
    secret (@repr WORDSIZE8 32);
    secret (@repr WORDSIZE8 252);
    secret (@repr WORDSIZE8 177);
    secret (@repr WORDSIZE8 91);
    secret (@repr WORDSIZE8 106);
    secret (@repr WORDSIZE8 203);
    secret (@repr WORDSIZE8 190);
    secret (@repr WORDSIZE8 57);
    secret (@repr WORDSIZE8 74);
    secret (@repr WORDSIZE8 76);
    secret (@repr WORDSIZE8 88);
    secret (@repr WORDSIZE8 207);
    secret (@repr WORDSIZE8 208);
    secret (@repr WORDSIZE8 239);
    secret (@repr WORDSIZE8 170);
    secret (@repr WORDSIZE8 251);
    secret (@repr WORDSIZE8 67);
    secret (@repr WORDSIZE8 77);
    secret (@repr WORDSIZE8 51);
    secret (@repr WORDSIZE8 133);
    secret (@repr WORDSIZE8 69);
    secret (@repr WORDSIZE8 249);
    secret (@repr WORDSIZE8 2);
    secret (@repr WORDSIZE8 127);
    secret (@repr WORDSIZE8 80);
    secret (@repr WORDSIZE8 60);
    secret (@repr WORDSIZE8 159);
    secret (@repr WORDSIZE8 168);
    secret (@repr WORDSIZE8 81);
    secret (@repr WORDSIZE8 163);
    secret (@repr WORDSIZE8 64);
    secret (@repr WORDSIZE8 143);
    secret (@repr WORDSIZE8 146);
    secret (@repr WORDSIZE8 157);
    secret (@repr WORDSIZE8 56);
    secret (@repr WORDSIZE8 245);
    secret (@repr WORDSIZE8 188);
    secret (@repr WORDSIZE8 182);
    secret (@repr WORDSIZE8 218);
    secret (@repr WORDSIZE8 33);
    secret (@repr WORDSIZE8 16);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 243);
    secret (@repr WORDSIZE8 210);
    secret (@repr WORDSIZE8 205);
    secret (@repr WORDSIZE8 12);
    secret (@repr WORDSIZE8 19);
    secret (@repr WORDSIZE8 236);
    secret (@repr WORDSIZE8 95);
    secret (@repr WORDSIZE8 151);
    secret (@repr WORDSIZE8 68);
    secret (@repr WORDSIZE8 23);
    secret (@repr WORDSIZE8 196);
    secret (@repr WORDSIZE8 167);
    secret (@repr WORDSIZE8 126);
    secret (@repr WORDSIZE8 61);
    secret (@repr WORDSIZE8 100);
    secret (@repr WORDSIZE8 93);
    secret (@repr WORDSIZE8 25);
    secret (@repr WORDSIZE8 115);
    secret (@repr WORDSIZE8 96);
    secret (@repr WORDSIZE8 129);
    secret (@repr WORDSIZE8 79);
    secret (@repr WORDSIZE8 220);
    secret (@repr WORDSIZE8 34);
    secret (@repr WORDSIZE8 42);
    secret (@repr WORDSIZE8 144);
    secret (@repr WORDSIZE8 136);
    secret (@repr WORDSIZE8 70);
    secret (@repr WORDSIZE8 238);
    secret (@repr WORDSIZE8 184);
    secret (@repr WORDSIZE8 20);
    secret (@repr WORDSIZE8 222);
    secret (@repr WORDSIZE8 94);
    secret (@repr WORDSIZE8 11);
    secret (@repr WORDSIZE8 219);
    secret (@repr WORDSIZE8 224);
    secret (@repr WORDSIZE8 50);
    secret (@repr WORDSIZE8 58);
    secret (@repr WORDSIZE8 10);
    secret (@repr WORDSIZE8 73);
    secret (@repr WORDSIZE8 6);
    secret (@repr WORDSIZE8 36);
    secret (@repr WORDSIZE8 92);
    secret (@repr WORDSIZE8 194);
    secret (@repr WORDSIZE8 211);
    secret (@repr WORDSIZE8 172);
    secret (@repr WORDSIZE8 98);
    secret (@repr WORDSIZE8 145);
    secret (@repr WORDSIZE8 149);
    secret (@repr WORDSIZE8 228);
    secret (@repr WORDSIZE8 121);
    secret (@repr WORDSIZE8 231);
    secret (@repr WORDSIZE8 200);
    secret (@repr WORDSIZE8 55);
    secret (@repr WORDSIZE8 109);
    secret (@repr WORDSIZE8 141);
    secret (@repr WORDSIZE8 213);
    secret (@repr WORDSIZE8 78);
    secret (@repr WORDSIZE8 169);
    secret (@repr WORDSIZE8 108);
    secret (@repr WORDSIZE8 86);
    secret (@repr WORDSIZE8 244);
    secret (@repr WORDSIZE8 234);
    secret (@repr WORDSIZE8 101);
    secret (@repr WORDSIZE8 122);
    secret (@repr WORDSIZE8 174);
    secret (@repr WORDSIZE8 8);
    secret (@repr WORDSIZE8 186);
    secret (@repr WORDSIZE8 120);
    secret (@repr WORDSIZE8 37);
    secret (@repr WORDSIZE8 46);
    secret (@repr WORDSIZE8 28);
    secret (@repr WORDSIZE8 166);
    secret (@repr WORDSIZE8 180);
    secret (@repr WORDSIZE8 198);
    secret (@repr WORDSIZE8 232);
    secret (@repr WORDSIZE8 221);
    secret (@repr WORDSIZE8 116);
    secret (@repr WORDSIZE8 31);
    secret (@repr WORDSIZE8 75);
    secret (@repr WORDSIZE8 189);
    secret (@repr WORDSIZE8 139);
    secret (@repr WORDSIZE8 138);
    secret (@repr WORDSIZE8 112);
    secret (@repr WORDSIZE8 62);
    secret (@repr WORDSIZE8 181);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 72);
    secret (@repr WORDSIZE8 3);
    secret (@repr WORDSIZE8 246);
    secret (@repr WORDSIZE8 14);
    secret (@repr WORDSIZE8 97);
    secret (@repr WORDSIZE8 53);
    secret (@repr WORDSIZE8 87);
    secret (@repr WORDSIZE8 185);
    secret (@repr WORDSIZE8 134);
    secret (@repr WORDSIZE8 193);
    secret (@repr WORDSIZE8 29);
    secret (@repr WORDSIZE8 158);
    secret (@repr WORDSIZE8 225);
    secret (@repr WORDSIZE8 248);
    secret (@repr WORDSIZE8 152);
    secret (@repr WORDSIZE8 17);
    secret (@repr WORDSIZE8 105);
    secret (@repr WORDSIZE8 217);
    secret (@repr WORDSIZE8 142);
    secret (@repr WORDSIZE8 148);
    secret (@repr WORDSIZE8 155);
    secret (@repr WORDSIZE8 30);
    secret (@repr WORDSIZE8 135);
    secret (@repr WORDSIZE8 233);
    secret (@repr WORDSIZE8 206);
    secret (@repr WORDSIZE8 85);
    secret (@repr WORDSIZE8 40);
    secret (@repr WORDSIZE8 223);
    secret (@repr WORDSIZE8 140);
    secret (@repr WORDSIZE8 161);
    secret (@repr WORDSIZE8 137);
    secret (@repr WORDSIZE8 13);
    secret (@repr WORDSIZE8 191);
    secret (@repr WORDSIZE8 230);
    secret (@repr WORDSIZE8 66);
    secret (@repr WORDSIZE8 104);
    secret (@repr WORDSIZE8 65);
    secret (@repr WORDSIZE8 153);
    secret (@repr WORDSIZE8 45);
    secret (@repr WORDSIZE8 15);
    secret (@repr WORDSIZE8 176);
    secret (@repr WORDSIZE8 84);
    secret (@repr WORDSIZE8 187);
    secret (@repr WORDSIZE8 22)]).

Definition RCON : RCon_t :=
  RCon (array_from_list [secret (@repr WORDSIZE8 141);
    secret (@repr WORDSIZE8 1);
    secret (@repr WORDSIZE8 2);
    secret (@repr WORDSIZE8 4);
    secret (@repr WORDSIZE8 8);
    secret (@repr WORDSIZE8 16);
    secret (@repr WORDSIZE8 32);
    secret (@repr WORDSIZE8 64);
    secret (@repr WORDSIZE8 128);
    secret (@repr WORDSIZE8 27);
    secret (@repr WORDSIZE8 54);
    secret (@repr WORDSIZE8 108);
    secret (@repr WORDSIZE8 216);
    secret (@repr WORDSIZE8 171);
    secret (@repr WORDSIZE8 77)]).

Definition sub_bytes (state : Block_t) : Block_t :=
  let st := (state) : Block_t in
  let st := (fold (into_iter (Build_Range_t (@repr WORDSIZE32 0)BLOCKSIZE)) st (fun i st =>
      update_at st i (SBOX.[(declassify (state.[i]))]))) : Block_t in
  st.

Definition shift_row (i : uint_size) (shift : uint_size) (state : Block_t) : Block_t :=
  let out := (state) : Block_t in
  let out := (update_at out i (state.[(i.+((@repr WORDSIZE32 4).*(shift.%(@repr WORDSIZE32 4))))])) : Block_t in
  let out := (update_at out (i.+(@repr WORDSIZE32 4)) (state.[(i.+((@repr WORDSIZE32 4).*((shift.+(@repr WORDSIZE32 1)).%(@repr WORDSIZE32 4))))])) : Block_t in
  let out := (update_at out (i.+(@repr WORDSIZE32 8)) (state.[(i.+((@repr WORDSIZE32 4).*((shift.+(@repr WORDSIZE32 2)).%(@repr WORDSIZE32 4))))])) : Block_t in
  let out := (update_at out (i.+(@repr WORDSIZE32 12)) (state.[(i.+((@repr WORDSIZE32 4).*((shift.+(@repr WORDSIZE32 3)).%(@repr WORDSIZE32 4))))])) : Block_t in
  out.

Definition shift_rows (state : Block_t) : Block_t :=
  let state := (shift_row (@repr WORDSIZE32 1) (@repr WORDSIZE32 1) state) : Block_t in
  let state := (shift_row (@repr WORDSIZE32 2) (@repr WORDSIZE32 2) state) : Block_t in
  shift_row (@repr WORDSIZE32 3) (@repr WORDSIZE32 3) state.

Definition xtime (x : U8_t) : _ :=
  let x1 := (shl x (@repr WORDSIZE32 1)) : _ in
  let x7 := (shr x (@repr WORDSIZE32 7)) : _ in
  let x71 := (x7.&(secret (@repr WORDSIZE8 1))) : _ in
  let x711b := (x71.*(secret (@repr WORDSIZE8 27))) : _ in
  x1.^x711b.

Definition mix_column (c : uint_size) (state : Block_t) : Block_t :=
  let i0 := ((@repr WORDSIZE32 4).*c) : uint_size in
  let s0 := (state.[i0]) : U8_t in
  let s1 := (state.[(i0.+(@repr WORDSIZE32 1))]) : U8_t in
  let s2 := (state.[(i0.+(@repr WORDSIZE32 2))]) : U8_t in
  let s3 := (state.[(i0.+(@repr WORDSIZE32 3))]) : U8_t in
  let st := (state) : Block_t in
  let tmp := (((s0.^s1).^s2).^s3) : _ in
  let st := (update_at st i0 ((s0.^tmp).^(xtime (s0.^s1)))) : Block_t in
  let st := (update_at st (i0.+(@repr WORDSIZE32 1)) ((s1.^tmp).^(xtime (s1.^s2)))) : Block_t in
  let st := (update_at st (i0.+(@repr WORDSIZE32 2)) ((s2.^tmp).^(xtime (s2.^s3)))) : Block_t in
  let st := (update_at st (i0.+(@repr WORDSIZE32 3)) ((s3.^tmp).^(xtime (s3.^s0)))) : Block_t in
  st.

Definition mix_columns (state : Block_t) : Block_t :=
  let state := (mix_column (@repr WORDSIZE32 0) state) : Block_t in
  let state := (mix_column (@repr WORDSIZE32 1) state) : Block_t in
  let state := (mix_column (@repr WORDSIZE32 2) state) : Block_t in
  mix_column (@repr WORDSIZE32 3) state.

Definition add_round_key (state : Block_t) (key : RoundKey_t) : Block_t :=
  let out := (state) : Block_t in
  let out := (fold (into_iter (Build_Range_t (@repr WORDSIZE32 0)BLOCKSIZE)) out (fun i out =>
      update_at out i ((out.[i]).^(key.[i])))) : Block_t in
  out.

Definition aes_enc (state : Block_t) (round_key : RoundKey_t) : Block_t :=
  let state := (sub_bytes state) : Block_t in
  let state := (shift_rows state) : Block_t in
  let state := (mix_columns state) : Block_t in
  add_round_key state round_key.

Definition aes_enc_last (state : Block_t) (round_key : RoundKey_t) : Block_t :=
  let state := (sub_bytes state) : Block_t in
  let state := (shift_rows state) : Block_t in
  add_round_key state round_key.

Definition rounds_aes (state : Block_t) (key : Seq_t U8_t) : Block_t :=
  let out := (state) : Block_t in
  let out := (fold (into_iter (Build_Range_t (@repr WORDSIZE32 0)(num_chunks key BLOCKSIZE))) out (fun i out =>
      let '(_,key_block) := (get_chunk key BLOCKSIZE i) : (uint_size × Seq_t U8_t) in
      let out := (aes_enc out (from_seq key_block)) : Block_t in
      out)) : Block_t in
  out.

Definition block_cipher_aes (input : Block_t) (key : Seq_t U8_t) (nr : uint_size) : Block_t :=
  let k0 := (from_slice_range key (Build_Range_t (@repr WORDSIZE32 0)(@repr WORDSIZE32 16))) : RoundKey_t in
  let k := (from_slice_range key (Build_Range_t (@repr WORDSIZE32 16)(nr.*(@repr WORDSIZE32 16)))) : Seq_t U8_t in
  let kn := (from_slice key (nr.*(@repr WORDSIZE32 16)) (@repr WORDSIZE32 16)) : RoundKey_t in
  let state := (add_round_key input k0) : Block_t in
  let state := (rounds_aes state k) : Block_t in
  aes_enc_last state kn.

Definition rotate_word (w : Word_t) : Word_t :=
  Word (array_from_list [w.[(@repr WORDSIZE32 1)];
    w.[(@repr WORDSIZE32 2)];
    w.[(@repr WORDSIZE32 3)];
    w.[(@repr WORDSIZE32 0)]]).

Definition slice_word (w : Word_t) : Word_t :=
  Word (array_from_list [SBOX.[(declassify_usize_from_U8 (w.[(@repr WORDSIZE32 0)]))];
    SBOX.[(declassify_usize_from_U8 (w.[(@repr WORDSIZE32 1)]))];
    SBOX.[(declassify_usize_from_U8 (w.[(@repr WORDSIZE32 2)]))];
    SBOX.[(declassify_usize_from_U8 (w.[(@repr WORDSIZE32 3)]))]]).

Definition aes_keygen_assist (w : Word_t) (rcon : U8_t) : Word_t :=
  let k := (rotate_word w) : Word_t in
  let k := (slice_word k) : Word_t in
  let k := (update_at k (@repr WORDSIZE32 0) ((k.[(@repr WORDSIZE32 0)]).^rcon)) : Word_t in
  k.

Definition key_expansion_word (w0 : Word_t) (w1 : Word_t) (i : uint_size) (nk : uint_size) (nr : uint_size) : Result_t (Word_t) (int8) :=
  let k := (w1) : Word_t in
  let result := (Err INVALID_KEY_EXPANSION_INDEX) : Result_t (Word_t) (int8) in
  let '(k,result) := (if
      i<.?((@repr WORDSIZE32 4).*(nr.+(@repr WORDSIZE32 1)))
    then
      let k := (if
          (i.%nk)=.?(@repr WORDSIZE32 0)
        then
          let k := (aes_keygen_assist k (RCON.[(i./nk)])) : Word_t in
          k
        else
          if
            andb (nk>.?(@repr WORDSIZE32 6)) ((i.%nk)=.?(@repr WORDSIZE32 4))
          then
            let k := (slice_word k) : Word_t in
            k
          else
            k) : Word_t in
      let k := (fold (into_iter (Build_Range_t (@repr WORDSIZE32 0)(@repr WORDSIZE32 4))) k (fun i k =>
          update_at k i ((k.[i]).^(w0.[i])))) : Word_t in
      let result := (Ok k) : Result_t (Word_t) (int8) in
      (k,result)
    else
      (k,result)) : (Word_t × Result_t (Word_t) (int8)) in
  result.

Definition key_expansion_aes (key : Seq_t U8_t) (nk : uint_size) (nr : uint_size) (key_schedule_length : uint_size) (key_length : uint_size) (iterations : uint_size) : Result_t (Seq_t U8_t) (int8) :=
  let key_ex := (new_seq key_schedule_length) : Seq_t U8_t in
  let key_ex := (update_start key_ex key) : Seq_t U8_t in
  let word_size := (key_length) : uint_size in
  let key_ex := (fold (into_iter (Build_Range_t (@repr WORDSIZE32 0)iterations)) key_ex (fun j key_ex =>
      let i := (j.+word_size) : uint_size in
      let word := (from_residual (key_expansion_word (from_slice key_ex ((@repr WORDSIZE32 4).*(i.-word_size)) (@repr WORDSIZE32 4)) (from_slice key_ex (((@repr WORDSIZE32 4).*i).-(@repr WORDSIZE32 4)) (@repr WORDSIZE32 4)) i nk nr)) : Result_t (Seq_t U8_t) (int8) in
      let key_ex := (update key_ex ((@repr WORDSIZE32 4).*i) word) : Seq_t U8_t in
      key_ex)) : Seq_t U8_t in
  Ok key_ex.

Definition aes_encrypt_block (k : Seq_t U8_t) (input : Block_t) (nk : uint_size) (nr : uint_size) (key_schedule_length : uint_size) (key_length : uint_size) (iterations : uint_size) : Result_t (Block_t) (int8) :=
  let key_ex := (from_residual (key_expansion_aes k nk nr key_schedule_length key_length iterations)) : Result_t (Block_t) (int8) in
  Ok (block_cipher_aes input key_ex nr).

Definition aes128_encrypt_block (k : Key128_t) (input : Block_t) : Block_t :=
  unwrap (aes_encrypt_block (from_seq k) input KEY_LENGTH ROUNDS KEY_SCHEDULE_LENGTH KEY_LENGTH ITERATIONS).

Definition aes_ctr_key_block (k : Seq_t U8_t) (n : AesNonce_t) (c : U32_t) (nk : uint_size) (nr : uint_size) (key_schedule_length : uint_size) (key_length : uint_size) (iterations : uint_size) : Result_t (Block_t) (int8) :=
  let input := (new) : Block_t in
  let input := (update input (@repr WORDSIZE32 0) n) : Block_t in
  let input := (update input (@repr WORDSIZE32 12) (U32_to_be_bytes c)) : Block_t in
  aes_encrypt_block k input nk nr key_schedule_length key_length iterations.

Definition xor_block (block : Block_t) (key_block : Block_t) : Block_t :=
  let out := (block) : Block_t in
  let out := (fold (into_iter (Build_Range_t (@repr WORDSIZE32 0)BLOCKSIZE)) out (fun i out =>
      update_at out i ((out.[i]).^(key_block.[i])))) : Block_t in
  out.

Definition aes_counter_mode (key : Seq_t U8_t) (nonce : AesNonce_t) (counter : U32_t) (msg : Seq_t U8_t) (nk : uint_size) (nr : uint_size) (key_schedule_length : uint_size) (key_length : uint_size) (iterations : uint_size) : Result_t (Seq_t U8_t) (int8) :=
  let ctr := (counter) : U32_t in
  let blocks_out := (new_seq (len msg)) : Seq_t U8_t in
  let n_blocks := (num_exact_chunks msg BLOCKSIZE) : uint_size in
  let '(blocks_out,ctr) := (fold (into_iter (Build_Range_t (@repr WORDSIZE32 0)n_blocks)) (blocks_out,ctr) (fun i '(blocks_out,ctr) =>
      let msg_block := (get_exact_chunk msg BLOCKSIZE i) : Seq_t U8_t in
      let key_block := (from_residual (aes_ctr_key_block key nonce ctr nk nr key_schedule_length key_length iterations)) : Result_t (Seq_t U8_t) (int8) in
      let blocks_out := (set_chunk blocks_out BLOCKSIZE i (xor_block (from_seq msg_block) key_block)) : Seq_t U8_t in
      let ctr := (ctr.+(secret (@repr WORDSIZE32 1))) : _ in
      (blocks_out,ctr))) : (Seq_t U8_t × _) in
  let last_block := (get_remainder_chunk msg BLOCKSIZE) : Seq_t U8_t in
  let last_block_len := (len last_block) : uint_size in
  let blocks_out := (if
      last_block_len<>(@repr WORDSIZE32 0)
    then
      let last_block := (update_start new last_block) : Block_t in
      let key_block := (from_residual (aes_ctr_key_block key nonce ctr nk nr key_schedule_length key_length iterations)) : Result_t (Seq_t U8_t) (int8) in
      let blocks_out := (set_chunk blocks_out BLOCKSIZE n_blocks (slice_range (xor_block last_block key_block) (Build_Range_t (@repr WORDSIZE32 0)last_block_len))) : Seq_t U8_t in
      blocks_out
    else
      blocks_out) : Seq_t U8_t in
  Ok blocks_out.

Definition aes128_encrypt (key : Key128_t) (nonce : AesNonce_t) (counter : U32_t) (msg : Seq_t U8_t) : Seq_t U8_t :=
  unwrap (aes_counter_mode (from_seq key) nonce counter msg KEY_LENGTH ROUNDS KEY_SCHEDULE_LENGTH KEY_LENGTH ITERATIONS).

Definition aes128_decrypt (key : Key128_t) (nonce : AesNonce_t) (counter : U32_t) (ctxt : Seq_t U8_t) : Seq_t U8_t :=
  unwrap (aes_counter_mode (from_seq key) nonce counter ctxt KEY_LENGTH ROUNDS KEY_SCHEDULE_LENGTH KEY_LENGTH ITERATIONS).
