(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

(*Not implemented yet? todo(item)*)

Require Import Hacspec_lib.

Require Import Hacspec_sha512.

Notation FieldCanvas := (nseq int8 256).
Notation Ed25519FieldElement_t := (nat_mod 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed).
Definition Ed25519FieldElement : Ed25519FieldElement_t -> Ed25519FieldElement_t :=
  id.

Notation ScalarCanvas := (nseq int8 256).
Notation Scalar_t := (nat_mod 0x1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed).
Definition Scalar : Scalar_t -> Scalar_t :=
  id.

Notation BigScalarCanvas := (nseq int8 512).
Notation BigScalar_t := (nat_mod 0x1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed).
Definition BigScalar : BigScalar_t -> BigScalar_t :=
  id.

Notation BigIntegerCanvas := (nseq int8 256).
Notation BigInteger_t := (nat_mod 0x8000000000000000000000000000000080000000000000000000000000000000).
Definition BigInteger : BigInteger_t -> BigInteger_t :=
  id.

Notation EdPoint_t := ((Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t)).

Notation CompressedEdPoint_t := (nseq int8 32).
Definition CompressedEdPoint : CompressedEdPoint_t -> CompressedEdPoint_t :=
  id.

Notation SerializedScalar_t := (nseq int8 32).
Definition SerializedScalar : SerializedScalar_t -> SerializedScalar_t :=
  id.

Notation Signature_t := (nseq int8 64).
Definition Signature : Signature_t -> Signature_t :=
  id.

Notation PublicKey_t := (CompressedEdPoint_t).

Notation SecretKey_t := (SerializedScalar_t).

Inductive Error_t : Type :=
| InvalidPublickeyError_t
| InvalidSignatureError_t
| InvalidSError_t
| InvalidRError_t
| SmallOrderPointError_t
| NotEnoughRandomnessError_t.

Notation VerifyResult_t := (Result_t (unit) (Error_t)).

Definition BASE : CompressedEdPoint_t :=
  CompressedEdPoint (array_from_list [secret (@repr WORDSIZE8 88);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102);
    secret (@repr WORDSIZE8 102)]).

Definition CONSTANT_P : SerializedScalar_t :=
  SerializedScalar (array_from_list [secret (@repr WORDSIZE8 237);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 127)]).

Definition CONSTANT_L : SerializedScalar_t :=
  SerializedScalar (array_from_list [secret (@repr WORDSIZE8 237);
    secret (@repr WORDSIZE8 211);
    secret (@repr WORDSIZE8 245);
    secret (@repr WORDSIZE8 92);
    secret (@repr WORDSIZE8 26);
    secret (@repr WORDSIZE8 99);
    secret (@repr WORDSIZE8 18);
    secret (@repr WORDSIZE8 88);
    secret (@repr WORDSIZE8 214);
    secret (@repr WORDSIZE8 156);
    secret (@repr WORDSIZE8 247);
    secret (@repr WORDSIZE8 162);
    secret (@repr WORDSIZE8 222);
    secret (@repr WORDSIZE8 249);
    secret (@repr WORDSIZE8 222);
    secret (@repr WORDSIZE8 20);
    secret (@repr WORDSIZE8 0);
    secret (@repr WORDSIZE8 0);
    secret (@repr WORDSIZE8 0);
    secret (@repr WORDSIZE8 0);
    secret (@repr WORDSIZE8 0);
    secret (@repr WORDSIZE8 0);
    secret (@repr WORDSIZE8 0);
    secret (@repr WORDSIZE8 0);
    secret (@repr WORDSIZE8 0);
    secret (@repr WORDSIZE8 0);
    secret (@repr WORDSIZE8 0);
    secret (@repr WORDSIZE8 0);
    secret (@repr WORDSIZE8 0);
    secret (@repr WORDSIZE8 0);
    secret (@repr WORDSIZE8 0);
    secret (@repr WORDSIZE8 16)]).

Definition CONSTANT_P3_8 : SerializedScalar_t :=
  SerializedScalar (array_from_list [secret (@repr WORDSIZE8 254);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 15)]).

Definition CONSTANT_P1_4 : SerializedScalar_t :=
  SerializedScalar (array_from_list [secret (@repr WORDSIZE8 251);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 255);
    secret (@repr WORDSIZE8 31)]).

Definition CONSTANT_D : SerializedScalar_t :=
  SerializedScalar (array_from_list [secret (@repr WORDSIZE8 163);
    secret (@repr WORDSIZE8 120);
    secret (@repr WORDSIZE8 89);
    secret (@repr WORDSIZE8 19);
    secret (@repr WORDSIZE8 202);
    secret (@repr WORDSIZE8 77);
    secret (@repr WORDSIZE8 235);
    secret (@repr WORDSIZE8 117);
    secret (@repr WORDSIZE8 171);
    secret (@repr WORDSIZE8 216);
    secret (@repr WORDSIZE8 65);
    secret (@repr WORDSIZE8 65);
    secret (@repr WORDSIZE8 77);
    secret (@repr WORDSIZE8 10);
    secret (@repr WORDSIZE8 112);
    secret (@repr WORDSIZE8 0);
    secret (@repr WORDSIZE8 152);
    secret (@repr WORDSIZE8 232);
    secret (@repr WORDSIZE8 121);
    secret (@repr WORDSIZE8 119);
    secret (@repr WORDSIZE8 121);
    secret (@repr WORDSIZE8 64);
    secret (@repr WORDSIZE8 199);
    secret (@repr WORDSIZE8 140);
    secret (@repr WORDSIZE8 115);
    secret (@repr WORDSIZE8 254);
    secret (@repr WORDSIZE8 111);
    secret (@repr WORDSIZE8 43);
    secret (@repr WORDSIZE8 238);
    secret (@repr WORDSIZE8 108);
    secret (@repr WORDSIZE8 3);
    secret (@repr WORDSIZE8 82)]).

Definition is_negative (x : Ed25519FieldElement_t) : U8_t :=
  if
    bit x (@repr WORDSIZE32 0)
  then
    secret (@repr WORDSIZE8 1)
  else
    secret (@repr WORDSIZE8 0).

Definition compress (p : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t)) : CompressedEdPoint_t :=
  let '(x,y,z,_) := (p) : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) in
  let z_inv := (inv z) : Ed25519FieldElement_t in
  let x := (x.*z_inv) : _ in
  let y := (y.*z_inv) : _ in
  let s := (to_byte_seq_le y) : Seq_t U8_t in
  let s := (update_at s (@repr WORDSIZE32 31) ((s.[(@repr WORDSIZE32 31)]).^(shl (is_negative x) (@repr WORDSIZE32 7)))) : Seq_t U8_t in
  from_slice s (@repr WORDSIZE32 0) (@repr WORDSIZE32 32).

Definition sqrt (a : Ed25519FieldElement_t) : Option_t Ed25519FieldElement_t :=
  let p3_8 := (from_byte_seq_le CONSTANT_P3_8) : Ed25519FieldElement_t in
  let p1_4 := (from_byte_seq_le CONSTANT_P1_4) : Ed25519FieldElement_t in
  let x_c := (pow_self a p3_8) : Ed25519FieldElement_t in
  let result := (NoneOption_t Ed25519FieldElement_t) : Option_t Ed25519FieldElement_t in
  let result := (if
      eq (x_c.*x_c) a
    then
      let result := (Some x_c) : Option_t Ed25519FieldElement_t in
      result
    else
      result) : Option_t Ed25519FieldElement_t in
  let result := (if
      eq (x_c.*x_c) (zero.-a)
    then
      let x := ((pow_self TWO p1_4).*x_c) : _ in
      let result := (Some x) : Option_t Ed25519FieldElement_t in
      result
    else
      result) : Option_t Ed25519FieldElement_t in
  result.

Definition check_canonical_point (x : CompressedEdPoint_t) : bool :=
  let x := (update_at x (@repr WORDSIZE32 31) ((x.[(@repr WORDSIZE32 31)]).&(secret (@repr WORDSIZE8 127)))) : CompressedEdPoint_t in
  let x := (from_byte_seq_le x) : BigInteger_t in
  lt x (from_byte_seq_le CONSTANT_P).

Definition decompress (q : CompressedEdPoint_t) : Option_t (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) :=
  run (let d := (from_byte_seq_le CONSTANT_D) : Ed25519FieldElement_t in
  let x_s := (shr ((q.[(@repr WORDSIZE32 31)]).&(secret (@repr WORDSIZE8 128))) (@repr WORDSIZE32 7)) : _ in
  let y_s := (q) : CompressedEdPoint_t in
  let y_s := (update_at y_s (@repr WORDSIZE32 31) ((y_s.[(@repr WORDSIZE32 31)]).&(secret (@repr WORDSIZE8 127)))) : CompressedEdPoint_t in
  let _ := (if
      MachineIntegers.not (check_canonical_point y_s)
    then
      let _ := (NoneOption_t (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t)) : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) in
      Some tt
    else
      Some tt) : unit in
  let y := (from_byte_seq_le y_s) : Ed25519FieldElement_t in
  let z := (ONE) : Ed25519FieldElement_t in
  let yy := (y.*y) : _ in
  let u := (yy.-z) : _ in
  let v := ((d.*yy).+z) : _ in
  let xx := (u.*(inv v)) : _ in
  let x := (from_residual (sqrt xx)) : Option_t (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) in
  let x_r := (is_negative x) : U8_t in
  let _ := (if
      andb (eq x zero) ((declassify x_s)=.?(@repr WORDSIZE8 1))
    then
      let _ := (NoneOption_t (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t)) : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) in
      Some tt
    else
      Some tt) : unit in
  Some (let x := (if
      (declassify x_r)<>(declassify x_s)
    then
      let x := (zero.-x) : _ in
      x
    else
      x) : _ in
  Some (x,y,z,x.*y))).

Definition decompress_non_canonical (p : CompressedEdPoint_t) : Option_t (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) :=
  let d := (from_byte_seq_le CONSTANT_D) : Ed25519FieldElement_t in
  let x_s := (shr ((p.[(@repr WORDSIZE32 31)]).&(secret (@repr WORDSIZE8 128))) (@repr WORDSIZE32 7)) : _ in
  let y_s := (p) : CompressedEdPoint_t in
  let y_s := (update_at y_s (@repr WORDSIZE32 31) ((y_s.[(@repr WORDSIZE32 31)]).&(secret (@repr WORDSIZE8 127)))) : CompressedEdPoint_t in
  let y := (from_byte_seq_le y_s) : Ed25519FieldElement_t in
  let z := (ONE) : Ed25519FieldElement_t in
  let yy := (y.*y) : _ in
  let u := (yy.-z) : _ in
  let v := ((d.*yy).+z) : _ in
  let xx := (u.*(inv v)) : _ in
  let x := (from_residual (sqrt xx)) : Option_t (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) in
  let x_r := (is_negative x) : U8_t in
  let x := (if
      (declassify x_r)<>(declassify x_s)
    then
      let x := (zero.-x) : _ in
      x
    else
      x) : _ in
  Some (x,y,z,x.*y).

Definition encode (p : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t)) : Seq_t U8_t :=
  let '(x,y,z,_) := (p) : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) in
  let z_inv := (inv z) : Ed25519FieldElement_t in
  let x := (x.*z_inv) : _ in
  let y := (y.*z_inv) : _ in
  let s := (to_byte_seq_le y) : Seq_t U8_t in
  let s := (update_at s (@repr WORDSIZE32 31) ((s.[(@repr WORDSIZE32 31)]).^(shl (is_negative x) (@repr WORDSIZE32 7)))) : Seq_t U8_t in
  s.

Definition decode (q_s : Seq_t U8_t) : Option_t (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) :=
  let q := (from_slice q_s (@repr WORDSIZE32 0) (@repr WORDSIZE32 32)) : CompressedEdPoint_t in
  decompress q.

Definition point_add (p : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t)) (q : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t)) : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) :=
  let d_c := (from_byte_seq_le CONSTANT_D) : Ed25519FieldElement_t in
  let two := (TWO) : Ed25519FieldElement_t in
  let '(x1,y1,z1,t1) := (p) : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) in
  let '(x2,y2,z2,t2) := (q) : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) in
  let a := ((y1.-x1).*(y2.-x2)) : _ in
  let b := ((y1.+x1).*(y2.+x2)) : _ in
  let c := (((t1.*two).*d_c).*t2) : _ in
  let d := ((z1.*two).*z2) : _ in
  let e := (b.-a) : _ in
  let f := (d.-c) : _ in
  let g := (d.+c) : _ in
  let h := (b.+a) : _ in
  let x3 := (e.*f) : _ in
  let y3 := (g.*h) : _ in
  let t3 := (e.*h) : _ in
  let z3 := (f.*g) : _ in
  (x3,y3,z3,t3).

Definition point_identity : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) :=
  (zero,ONE,ONE,zero).

Definition point_mul (s : Scalar_t) (p : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t)) : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) :=
  let p := (p) : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) in
  let q := (point_identity) : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) in
  let '(p,q) := (fold (into_iter (Build_Range_t (@repr WORDSIZE32 0)(@repr WORDSIZE32 256))) (p,q) (fun i '(p,q) =>
      let q := (if
          bit s i
        then
          let q := (point_add q p) : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) in
          q
        else
          q) : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) in
      let p := (point_add p p) : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) in
      (p,q))) : ((Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) × (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t)) in
  q.

Definition point_mul_by_cofactor (p : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t)) : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) :=
  let p2 := (point_add p p) : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) in
  let p4 := (point_add p2 p2) : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) in
  point_add p4 p4.

Definition point_neg (p : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t)) : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) :=
  let '(x,y,z,t) := (p) : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) in
  (zero.-x,y,z,zero.-t).

Definition point_eq (p : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t)) (q : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t)) : bool :=
  let '(x1,y1,z1,_) := (p) : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) in
  let '(x2,y2,z2,_) := (q) : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) in
  andb (eq (x1.*z2) (x2.*z1)) (eq (y1.*z2) (y2.*z1)).

Definition point_normalize (q : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t)) : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) :=
  let '(qx,qy,qz,_) := (q) : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) in
  let px := (qx.*(inv qz)) : _ in
  let py := (qy.*(inv qz)) : _ in
  let pz := (ONE) : Ed25519FieldElement_t in
  let pt := (px.*py) : _ in
  (px,py,pz,pt).

Definition secret_expand (sk : SerializedScalar_t) : (SerializedScalar_t × SerializedScalar_t) :=
  let h := (sha512 (from_slice sk (@repr WORDSIZE32 0) (@repr WORDSIZE32 32))) : Sha512Digest_t in
  let h_d := (from_slice h (@repr WORDSIZE32 32) (@repr WORDSIZE32 32)) : SerializedScalar_t in
  let s := (from_slice h (@repr WORDSIZE32 0) (@repr WORDSIZE32 32)) : SerializedScalar_t in
  let s := (update_at s (@repr WORDSIZE32 0) ((s.[(@repr WORDSIZE32 0)]).&(secret (@repr WORDSIZE8 248)))) : SerializedScalar_t in
  let s := (update_at s (@repr WORDSIZE32 31) ((s.[(@repr WORDSIZE32 31)]).&(secret (@repr WORDSIZE8 127)))) : SerializedScalar_t in
  let s := (update_at s (@repr WORDSIZE32 31) ((s.[(@repr WORDSIZE32 31)]).|(secret (@repr WORDSIZE8 64)))) : SerializedScalar_t in
  (s,h_d).

Definition secret_to_public (sk : SerializedScalar_t) : CompressedEdPoint_t :=
  let '(s,_) := (secret_expand sk) : (SerializedScalar_t × SerializedScalar_t) in
  let base := (unwrap (decompress BASE)) : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) in
  let ss := (from_byte_seq_le s) : Scalar_t in
  let a := (point_mul ss base) : (Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t × Ed25519FieldElement_t) in
  compress a.

Definition check_canonical_scalar (s : SerializedScalar_t) : bool :=
  if
    (declassify ((s.[(@repr WORDSIZE32 31)]).&(secret (@repr WORDSIZE8 224))))<>(@repr WORDSIZE8 0)
  then
    false
  else
    lt (from_byte_seq_le s) (from_byte_seq_le CONSTANT_L).
