DIGEST a67a91beb7c1dc5062b42c5a2a69f0f7
FExamples.aes_hac
R83:95 mathcomp.ssreflect.all_ssreflect <> <> lib
R97:107 mathcomp.algebra.all_algebra <> <> lib
R109:113 mathcomp.analysis.reals <> <> lib
R115:119 mathcomp.analysis.altreals.distr <> <> lib
R121:127 mathcomp.analysis.altreals.realsum <> <> lib
R134:150 mathcomp.fingroup.fingroup <> <> lib
R152:166 mathcomp.solvable.cyclic <> <> lib
R168:172 mathcomp.ssreflect.prime <> <> lib
R174:179 mathcomp.ssreflect.ssrnat <> <> lib
R181:189 mathcomp.ssreflect.ssreflect <> <> lib
R191:196 mathcomp.ssreflect.ssrfun <> <> lib
R198:204 mathcomp.ssreflect.ssrbool <> <> lib
R211:216 mathcomp.algebra.ssrnum <> <> lib
R218:223 mathcomp.ssreflect.eqtype <> <> lib
R225:230 mathcomp.ssreflect.choice <> <> lib
R232:234 mathcomp.ssreflect.seq <> <> lib
R305:308 Coq.Lists.List <> <> lib
R375:378 Jasmin.expr <> <> lib
R444:457 Jasmin.x86_instr_decl <> <> lib
R459:467 Jasmin.x86_extra <> <> lib
R504:519 JasminSSProve.jasmin_translate <> <> lib
R548:554 Crypt.Prelude <> <> lib
R556:562 Crypt.Package <> <> lib
R573:585 Coq.Lists.List ListNotations <> mod
R679:682 Coq.Unicode.Utf8 <> <> lib
R717:719 extructures.ord <> <> lib
R721:724 extructures.fset <> <> lib
R726:729 extructures.fmap <> <> lib
R747:759 Coq.micromega.Lia <> <> lib
R791:794 mathcomp.word.word <> <> lib
R796:799 mathcomp.zify.ssrZ <> <> lib
R836:843 JasminSSProve.examples.aes.aes_jazz <> <> lib
R845:856 JasminSSProve.jasmin_utils <> <> lib
R893:901 JasminSSProve.examples.aes.aes_utils <> <> lib
R911:924 JasminSSProve.jasmin_translate JasminNotation <> mod
R926:943 JasminSSProve.jasmin_utils JasminCodeNotation <> mod
R953:967 Crypt.package.pkg_notation PackageNotation <> mod
R999:1012 Hacspec.ChoiceEquality <> <> lib
R1014:1024 Hacspec.Hacspec_Lib <> <> lib
R1026:1040 Hacspec.Hacspec_Lib_Pre <> <> lib
R1042:1063 Hacspec.Hacspec_Lib_Comparable <> <> lib
R1081:1096 Examples.Hacspec_aes_jazz <> <> lib
R1218:1228 Hacspec.Hacspec_Lib <> <> lib
R1261:1274 mathcomp.zify.zify_ssreflect <> <> lib
R1276:1287 mathcomp.zify.zify_algebra <> <> lib
R1289:1292 mathcomp.zify.zify <> <> lib
sec 1357:1363 <> Hacspec
R1587:1610 JasminSSProve.jasmin_translate <> injective_translate_var3 thm
R1627:1650 JasminSSProve.jasmin_translate <> injective_translate_var2 thm
R1732:1738 Crypt.package.pkg_invariants <> set_lhs def
R1732:1738 Crypt.package.pkg_invariants <> set_lhs def
R1866:1872 Crypt.package.pkg_invariants <> set_rhs def
R1866:1872 Crypt.package.pkg_invariants <> set_rhs def
R2001:2004 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R2001:2004 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R2121:2121 Crypt.package.pkg_invariants <> ::package_scope:x_'⋊'_x not
R2123:2127 Crypt.package.pkg_invariants <> ::package_scope:x_'⋊'_x not
R2129:2131 Crypt.package.pkg_invariants <> ::package_scope:x_'⋊'_x not
R2121:2121 Crypt.package.pkg_invariants <> ::package_scope:x_'⋊'_x not
R2123:2127 Crypt.package.pkg_invariants <> ::package_scope:x_'⋊'_x not
R2129:2131 Crypt.package.pkg_invariants <> ::package_scope:x_'⋊'_x not
R2247:2253 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R2255:2256 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R2247:2253 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R2255:2256 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
prf 2365:2372 <> det_jkey
binder 2374:2376 <> id0:1
binder 2378:2381 <> rcon:2
binder 2383:2386 <> rkey:3
binder 2388:2392 <> temp2:4
R2396:2408 Crypt.package.pkg_rhl <> deterministic ind
R2411:2422 JasminSSProve.examples.aes.aes_jazz <> JKEY_COMBINE syndef
R2424:2426 Examples.aes_hac <> id0:1 var
R2428:2431 Examples.aes_hac <> rcon:2 var
R2433:2436 Examples.aes_hac <> rkey:3 var
R2438:2442 Examples.aes_hac <> temp2:4 var
R2466:2479 JasminSSProve.jasmin_translate <> translate_call def
R2482:2500 JasminSSProve.jasmin_translate <> translate_call_body def
R2514:2527 JasminSSProve.jasmin_translate <> translate_call def
R2625:2641 Crypt.package.pkg_rhl <> deterministic_ret constr
R2588:2604 Crypt.package.pkg_rhl <> deterministic_get constr
R2560:2576 Crypt.package.pkg_rhl <> deterministic_put constr
R2560:2576 Crypt.package.pkg_rhl <> deterministic_put constr
R2560:2576 Crypt.package.pkg_rhl <> deterministic_put constr
R2560:2576 Crypt.package.pkg_rhl <> deterministic_put constr
R2560:2576 Crypt.package.pkg_rhl <> deterministic_put constr
R2588:2604 Crypt.package.pkg_rhl <> deterministic_get constr
R2560:2576 Crypt.package.pkg_rhl <> deterministic_put constr
R2560:2576 Crypt.package.pkg_rhl <> deterministic_put constr
R2588:2604 Crypt.package.pkg_rhl <> deterministic_get constr
R2560:2576 Crypt.package.pkg_rhl <> deterministic_put constr
R2588:2604 Crypt.package.pkg_rhl <> deterministic_get constr
R2560:2576 Crypt.package.pkg_rhl <> deterministic_put constr
R2560:2576 Crypt.package.pkg_rhl <> deterministic_put constr
R2588:2604 Crypt.package.pkg_rhl <> deterministic_get constr
R2560:2576 Crypt.package.pkg_rhl <> deterministic_put constr
R2588:2604 Crypt.package.pkg_rhl <> deterministic_get constr
R2560:2576 Crypt.package.pkg_rhl <> deterministic_put constr
R2560:2576 Crypt.package.pkg_rhl <> deterministic_put constr
R2588:2604 Crypt.package.pkg_rhl <> deterministic_get constr
R2560:2576 Crypt.package.pkg_rhl <> deterministic_put constr
R2588:2604 Crypt.package.pkg_rhl <> deterministic_get constr
R2560:2576 Crypt.package.pkg_rhl <> deterministic_put constr
R2560:2576 Crypt.package.pkg_rhl <> deterministic_put constr
R2588:2604 Crypt.package.pkg_rhl <> deterministic_get constr
R2560:2576 Crypt.package.pkg_rhl <> deterministic_put constr
R2588:2604 Crypt.package.pkg_rhl <> deterministic_get constr
R2560:2576 Crypt.package.pkg_rhl <> deterministic_put constr
R2560:2576 Crypt.package.pkg_rhl <> deterministic_put constr
R2588:2604 Crypt.package.pkg_rhl <> deterministic_get constr
R2560:2576 Crypt.package.pkg_rhl <> deterministic_put constr
R2588:2604 Crypt.package.pkg_rhl <> deterministic_get constr
R2560:2576 Crypt.package.pkg_rhl <> deterministic_put constr
R2560:2576 Crypt.package.pkg_rhl <> deterministic_put constr
R2588:2604 Crypt.package.pkg_rhl <> deterministic_get constr
R2560:2576 Crypt.package.pkg_rhl <> deterministic_put constr
R2588:2604 Crypt.package.pkg_rhl <> deterministic_get constr
R2560:2576 Crypt.package.pkg_rhl <> deterministic_put constr
R2588:2604 Crypt.package.pkg_rhl <> deterministic_get constr
R2625:2641 Crypt.package.pkg_rhl <> deterministic_ret constr
R2661:2674 JasminSSProve.jasmin_translate <> translate_call def
R2514:2527 JasminSSProve.jasmin_translate <> translate_call def
R2661:2674 JasminSSProve.jasmin_translate <> translate_call def
prf 3180:3193 <> unfold_det_run
R3209:3218 mathcomp.ssreflect.choice Choice.Exports choiceType syndef
binder 3205:3205 <> A:5
binder 3221:3221 <> c:6
R3229:3241 Crypt.package.pkg_rhl <> deterministic ind
R3243:3243 Examples.aes_hac <> A:5 var
R3245:3245 Examples.aes_hac <> c:6 var
binder 3224:3224 <> h:7
binder 3248:3248 <> s:8
R3267:3269 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3252:3258 Crypt.package.pkg_rhl <> det_run def
R3260:3260 Examples.aes_hac <> A:5 var
R3262:3262 Examples.aes_hac <> c:6 var
R3264:3264 Examples.aes_hac <> h:7 var
R3266:3266 Examples.aes_hac <> s:8 var
R3276:3276 Examples.aes_hac <> h:7 var
R3378:3394 Crypt.package.pkg_rhl <> deterministic_ret constr
R3401:3401 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3403:3404 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3406:3406 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3405:3405 Examples.aes_hac <> s:8 var
R3503:3519 Crypt.package.pkg_rhl <> deterministic_get constr
R3533:3539 Crypt.package.pkg_rhl <> det_run def
R3574:3574 Examples.aes_hac <> s:8 var
R3545:3552 Crypt.package.pkg_heap <> get_heap def
R3554:3554 Examples.aes_hac <> s:8 var
R3671:3687 Crypt.package.pkg_rhl <> deterministic_put constr
R3703:3709 Crypt.package.pkg_rhl <> det_run def
R3724:3731 Crypt.package.pkg_heap <> set_heap def
R3733:3733 Examples.aes_hac <> s:8 var
R3946:3953 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R3956:3960 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R3977:3981 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R3983:3987 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R3990:3993 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R3961:3964 Crypt.package.pkg_core_definition <> putr constr
R3946:3953 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R3956:3960 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R3977:3981 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R3983:3987 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R3990:3993 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R3961:3964 Crypt.package.pkg_core_definition <> putr constr
R4019:4024 Crypt.package.pkg_rhl <> r_bind thm
R4035:4037 Crypt.package.pkg_core_definition <> ret constr
binder 4052:4052 <> x:10
R4057:4060 Crypt.package.pkg_core_definition <> putr constr
R4064:4064 Examples.aes_hac <> x:10 var
R4079:4079 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4082:4083 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4086:4086 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
binder 4084:4085 <> h0:11
binder 4080:4081 <> v0:12
binder 4079:4086 <> pat:13
R4089:4089 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4092:4093 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4096:4096 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
binder 4094:4095 <> h1:14
binder 4090:4091 <> v1:15
binder 4089:4096 <> pat:16
R4108:4111 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R4103:4105 Coq.Init.Logic <> ::type_scope:x_'='_x not
R4101:4102 Examples.aes_hac <> v0:12 var
R4106:4107 Examples.aes_hac <> v1:15 var
R4114:4114 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4117:4118 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4121:4121 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4115:4116 Examples.aes_hac <> h0:11 var
R4119:4120 Examples.aes_hac <> h1:14 var
R4144:4156 Jasmin.word <> zero_extend_u thm
R4218:4240 Hacspec.ChoiceEquality <> better_r_get_remind_lhs thm
R4255:4267 Crypt.package.pkg_invariants <> Remembers_lhs class
R4271:4277 Crypt.package.pkg_invariants <> rem_lhs def
R4345:4360 Crypt.package.pkg_heap <> get_set_heap_neq thm
R4374:4397 JasminSSProve.jasmin_translate <> injective_translate_var3 thm
R4432:4446 Crypt.package.pkg_heap <> get_set_heap_eq thm
prf 4484:4496 <> shiftr_bounds
binder 4507:4507 <> x:17
binder 4509:4509 <> y:18
binder 4511:4511 <> z:19
R4530:4539 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4522:4525 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R4526:4526 Examples.aes_hac <> y:18 var
R4575:4584 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4542:4545 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R4547:4549 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R4546:4546 Examples.aes_hac <> x:17 var
R4546:4546 Examples.aes_hac <> x:17 var
R4550:4556 mathcomp.word.word <> modulus def
R4560:4560 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'+'_x not
R4559:4559 Examples.aes_hac <> z:19 var
R4561:4568 Coq.ZArith.BinInt Z to_nat def
R4570:4570 Examples.aes_hac <> y:18 var
R4587:4590 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R4603:4605 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R4591:4598 Coq.ZArith.BinInt Z shiftr def
R4600:4600 Examples.aes_hac <> x:17 var
R4602:4602 Examples.aes_hac <> y:18 var
R4591:4598 Coq.ZArith.BinInt Z shiftr def
R4600:4600 Examples.aes_hac <> x:17 var
R4602:4602 Examples.aes_hac <> y:18 var
R4606:4612 mathcomp.word.word <> modulus def
R4614:4614 Examples.aes_hac <> z:19 var
R4653:4669 Coq.ZArith.BinInt Z shiftr_div_pow2 thm
R4653:4669 Coq.ZArith.BinInt Z shiftr_div_pow2 thm
R4653:4669 Coq.ZArith.BinInt Z shiftr_div_pow2 thm
R4736:4738 Coq.Init.Logic <> ::type_scope:x_'='_x not
R4728:4730 Coq.ZArith.BinInt <> ::Z_scope:x_'/'_x not
R4704:4710 mathcomp.word.word <> modulus def
R4714:4716 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'+'_x not
R4717:4724 Coq.ZArith.BinInt Z to_nat def
R4732:4734 Coq.ZArith.BinInt <> ::Z_scope:x_'^'_x not
R4739:4745 mathcomp.word.word <> modulus def
R4736:4738 Coq.Init.Logic <> ::type_scope:x_'='_x not
R4728:4730 Coq.ZArith.BinInt <> ::Z_scope:x_'/'_x not
R4704:4710 mathcomp.word.word <> modulus def
R4714:4716 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'+'_x not
R4717:4724 Coq.ZArith.BinInt Z to_nat def
R4732:4734 Coq.ZArith.BinInt <> ::Z_scope:x_'^'_x not
R4739:4745 mathcomp.word.word <> modulus def
R4772:4778 mathcomp.word.word <> modulus def
R4795:4815 Coq.ZArith.Zpower <> two_power_nat_correct thm
R4795:4815 Coq.ZArith.Zpower <> two_power_nat_correct thm
R4795:4815 Coq.ZArith.Zpower <> two_power_nat_correct thm
R4832:4852 Coq.ZArith.Zpower <> two_power_nat_correct thm
R4832:4852 Coq.ZArith.Zpower <> two_power_nat_correct thm
R4832:4852 Coq.ZArith.Zpower <> two_power_nat_correct thm
R4869:4880 Coq.ZArith.Zpower <> Zpower_nat_Z thm
R4869:4880 Coq.ZArith.Zpower <> Zpower_nat_Z thm
R4869:4880 Coq.ZArith.Zpower <> Zpower_nat_Z thm
R4897:4908 Coq.ZArith.Zpower <> Zpower_nat_Z thm
R4897:4908 Coq.ZArith.Zpower <> Zpower_nat_Z thm
R4897:4908 Coq.ZArith.Zpower <> Zpower_nat_Z thm
R4925:4937 Coq.ZArith.Znat Nat2Z inj_add thm
R4925:4937 Coq.ZArith.Znat Nat2Z inj_add thm
R4925:4937 Coq.ZArith.Znat Nat2Z inj_add thm
R4954:4961 Coq.ZArith.Znat Z2Nat id thm
R4954:4961 Coq.ZArith.Znat Z2Nat id thm
R4954:4961 Coq.ZArith.Znat Z2Nat id thm
R5000:5010 Coq.ZArith.BinInt Z pow_sub_r thm
R5028:5040 Coq.ZArith.BinInt Z add_simpl_r thm
R5000:5010 Coq.ZArith.BinInt Z pow_sub_r thm
R5000:5010 Coq.ZArith.BinInt Z pow_sub_r thm
R5000:5010 Coq.ZArith.BinInt Z pow_sub_r thm
R5000:5010 Coq.ZArith.BinInt Z pow_sub_r thm
R5028:5040 Coq.ZArith.BinInt Z add_simpl_r thm
R5028:5040 Coq.ZArith.BinInt Z add_simpl_r thm
R5118:5136 Coq.ZArith.Zdiv <> Z_div_nonneg_nonneg thm
R5118:5136 Coq.ZArith.Zdiv <> Z_div_nonneg_nonneg thm
R5158:5177 Coq.ZArith.BinInt Z div_lt_upper_bound thm
R5158:5177 Coq.ZArith.BinInt Z div_lt_upper_bound thm
R5205:5217 Coq.ZArith.BinInt Z lt_le_trans thm
R5205:5217 Coq.ZArith.BinInt Z lt_le_trans thm
R5250:5259 Coq.ZArith.BinInt Z mul_comm thm
R5250:5259 Coq.ZArith.BinInt Z mul_comm thm
R5250:5259 Coq.ZArith.BinInt Z mul_comm thm
R5275:5281 mathcomp.word.word <> modulus def
R5298:5318 Coq.ZArith.Zpower <> two_power_nat_correct thm
R5298:5318 Coq.ZArith.Zpower <> two_power_nat_correct thm
R5298:5318 Coq.ZArith.Zpower <> two_power_nat_correct thm
R5335:5355 Coq.ZArith.Zpower <> two_power_nat_correct thm
R5335:5355 Coq.ZArith.Zpower <> two_power_nat_correct thm
R5335:5355 Coq.ZArith.Zpower <> two_power_nat_correct thm
R5372:5383 Coq.ZArith.Zpower <> Zpower_nat_Z thm
R5372:5383 Coq.ZArith.Zpower <> Zpower_nat_Z thm
R5372:5383 Coq.ZArith.Zpower <> Zpower_nat_Z thm
R5400:5411 Coq.ZArith.Zpower <> Zpower_nat_Z thm
R5400:5411 Coq.ZArith.Zpower <> Zpower_nat_Z thm
R5400:5411 Coq.ZArith.Zpower <> Zpower_nat_Z thm
R5431:5441 Coq.ZArith.BinInt Z pow_add_r thm
R5431:5441 Coq.ZArith.BinInt Z pow_add_r thm
R5431:5441 Coq.ZArith.BinInt Z pow_add_r thm
R5431:5441 Coq.ZArith.BinInt Z pow_add_r thm
R5431:5441 Coq.ZArith.BinInt Z pow_add_r thm
R5469:5481 Coq.ZArith.Znat Nat2Z inj_add thm
R5469:5481 Coq.ZArith.Znat Nat2Z inj_add thm
R5469:5481 Coq.ZArith.Znat Nat2Z inj_add thm
R5498:5505 Coq.ZArith.Znat Z2Nat id thm
R5498:5505 Coq.ZArith.Znat Z2Nat id thm
R5498:5505 Coq.ZArith.Znat Z2Nat id thm
prf 5585:5597 <> shiftl_bounds
binder 5608:5608 <> x:20
R5617:5619 Coq.Init.Datatypes <> nat ind
binder 5611:5611 <> y:21
binder 5613:5613 <> z:22
R5657:5666 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5640:5643 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R5630:5637 Coq.ZArith.BinInt Z of_nat def
R5639:5639 Examples.aes_hac <> y:21 var
R5644:5651 Coq.ZArith.BinInt Z of_nat def
R5653:5653 Examples.aes_hac <> z:22 var
R5695:5704 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5669:5672 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R5674:5676 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R5673:5673 Examples.aes_hac <> x:20 var
R5673:5673 Examples.aes_hac <> x:20 var
R5677:5683 mathcomp.word.word <> modulus def
R5687:5689 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'-'_x not
R5686:5686 Examples.aes_hac <> z:22 var
R5690:5690 Examples.aes_hac <> y:21 var
R5707:5710 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R5734:5736 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R5711:5718 Coq.ZArith.BinInt Z shiftl def
R5720:5720 Examples.aes_hac <> x:20 var
R5723:5730 Coq.ZArith.BinInt Z of_nat def
R5732:5732 Examples.aes_hac <> y:21 var
R5711:5718 Coq.ZArith.BinInt Z shiftl def
R5720:5720 Examples.aes_hac <> x:20 var
R5723:5730 Coq.ZArith.BinInt Z of_nat def
R5732:5732 Examples.aes_hac <> y:21 var
R5737:5743 mathcomp.word.word <> modulus def
R5745:5745 Examples.aes_hac <> z:22 var
R5784:5800 Coq.ZArith.BinInt Z shiftl_mul_pow2 thm
R5784:5800 Coq.ZArith.BinInt Z shiftl_mul_pow2 thm
R5784:5800 Coq.ZArith.BinInt Z shiftl_mul_pow2 thm
R5869:5871 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5850:5852 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R5835:5841 mathcomp.word.word <> modulus def
R5845:5847 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'-'_x not
R5854:5857 Coq.ZArith.BinInt <> ::Z_scope:x_'^'_x not
R5868:5868 Coq.ZArith.BinInt <> ::Z_scope:x_'^'_x not
R5858:5865 Coq.ZArith.BinInt Z of_nat def
R5872:5878 mathcomp.word.word <> modulus def
R5869:5871 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5850:5852 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R5835:5841 mathcomp.word.word <> modulus def
R5845:5847 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'-'_x not
R5854:5857 Coq.ZArith.BinInt <> ::Z_scope:x_'^'_x not
R5868:5868 Coq.ZArith.BinInt <> ::Z_scope:x_'^'_x not
R5858:5865 Coq.ZArith.BinInt Z of_nat def
R5872:5878 mathcomp.word.word <> modulus def
R5905:5911 mathcomp.word.word <> modulus def
R5928:5948 Coq.ZArith.Zpower <> two_power_nat_correct thm
R5928:5948 Coq.ZArith.Zpower <> two_power_nat_correct thm
R5928:5948 Coq.ZArith.Zpower <> two_power_nat_correct thm
R5965:5985 Coq.ZArith.Zpower <> two_power_nat_correct thm
R5965:5985 Coq.ZArith.Zpower <> two_power_nat_correct thm
R5965:5985 Coq.ZArith.Zpower <> two_power_nat_correct thm
R6002:6013 Coq.ZArith.Zpower <> Zpower_nat_Z thm
R6002:6013 Coq.ZArith.Zpower <> Zpower_nat_Z thm
R6002:6013 Coq.ZArith.Zpower <> Zpower_nat_Z thm
R6030:6041 Coq.ZArith.Zpower <> Zpower_nat_Z thm
R6030:6041 Coq.ZArith.Zpower <> Zpower_nat_Z thm
R6030:6041 Coq.ZArith.Zpower <> Zpower_nat_Z thm
R6061:6071 Coq.ZArith.BinInt Z pow_add_r thm
R6061:6071 Coq.ZArith.BinInt Z pow_add_r thm
R6061:6071 Coq.ZArith.BinInt Z pow_add_r thm
R6061:6071 Coq.ZArith.BinInt Z pow_add_r thm
R6061:6071 Coq.ZArith.BinInt Z pow_add_r thm
R6121:6133 Coq.ZArith.Znat Nat2Z inj_sub thm
R6121:6133 Coq.ZArith.Znat Nat2Z inj_sub thm
R6121:6133 Coq.ZArith.Znat Nat2Z inj_sub thm
R6150:6162 Coq.ZArith.BinInt Z sub_simpl_r thm
R6150:6162 Coq.ZArith.BinInt Z sub_simpl_r thm
R6150:6162 Coq.ZArith.BinInt Z sub_simpl_r thm
R6196:6207 Coq.ZArith.Znat Nat2Z inj_le thm
R6196:6207 Coq.ZArith.Znat Nat2Z inj_le thm
R6254:6272 Coq.ZArith.BinInt Z mul_nonneg_nonneg thm
R6254:6272 Coq.ZArith.BinInt Z mul_nonneg_nonneg thm
R6320:6338 Coq.ZArith.BinInt Z mul_lt_mono_pos_r thm
R6320:6338 Coq.ZArith.BinInt Z mul_lt_mono_pos_r thm
R6320:6338 Coq.ZArith.BinInt Z mul_lt_mono_pos_r thm
R6320:6338 Coq.ZArith.BinInt Z mul_lt_mono_pos_r thm
prf 6393:6406 <> shiftr_smaller
binder 6417:6417 <> x:23
binder 6419:6419 <> y:24
binder 6421:6421 <> n:25
R6440:6449 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6432:6435 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R6436:6436 Examples.aes_hac <> y:24 var
R6487:6496 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6452:6455 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R6457:6459 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R6456:6456 Examples.aes_hac <> x:23 var
R6456:6456 Examples.aes_hac <> x:23 var
R6460:6466 mathcomp.word.word <> modulus def
R6470:6472 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'+'_x not
R6469:6469 Examples.aes_hac <> n:25 var
R6473:6480 Coq.ZArith.BinInt Z to_nat def
R6482:6482 Examples.aes_hac <> y:24 var
R6509:6511 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6497:6504 Coq.ZArith.BinInt Z shiftr def
R6506:6506 Examples.aes_hac <> x:23 var
R6508:6508 Examples.aes_hac <> y:24 var
R6525:6529 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R6513:6520 Coq.ZArith.BinInt Z shiftr def
R6522:6522 Examples.aes_hac <> x:23 var
R6524:6524 Examples.aes_hac <> y:24 var
R6530:6536 mathcomp.word.word <> modulus def
R6538:6538 Examples.aes_hac <> n:25 var
R6577:6586 Coq.ZArith.Zdiv <> Zmod_small thm
R6577:6586 Coq.ZArith.Zdiv <> Zmod_small thm
R6577:6586 Coq.ZArith.Zdiv <> Zmod_small thm
R6609:6621 Examples.aes_hac <> shiftr_bounds thm
R6609:6621 Examples.aes_hac <> shiftr_bounds thm
syndef 6701:6708 <> JVSHUFPS
R6733:6735 JasminSSProve.examples.aes.aes_jazz <> trc syndef
R6737:6743 Jasmin.x86_instr_decl <> VSHUFPS constr
R6747:6747 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R6767:6769 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R6790:6792 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R6813:6813 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R6748:6748 Crypt.Prelude <> :::'('_x_';'_x_')' not
R6759:6761 Crypt.Prelude <> :::'('_x_';'_x_')' not
R6766:6766 Crypt.Prelude <> :::'('_x_';'_x_')' not
R6749:6754 Crypt.package.pkg_notation PackageNotation ::package_scope:'''word'_x not
R6755:6758 Jasmin.wsize <> U128 constr
R6770:6770 Crypt.Prelude <> :::'('_x_';'_x_')' not
R6781:6783 Crypt.Prelude <> :::'('_x_';'_x_')' not
R6789:6789 Crypt.Prelude <> :::'('_x_';'_x_')' not
R6771:6776 Crypt.package.pkg_notation PackageNotation ::package_scope:'''word'_x not
R6777:6780 Jasmin.wsize <> U128 constr
R6793:6793 Crypt.Prelude <> :::'('_x_';'_x_')' not
R6804:6806 Crypt.Prelude <> :::'('_x_';'_x_')' not
R6812:6812 Crypt.Prelude <> :::'('_x_';'_x_')' not
R6794:6799 Crypt.package.pkg_notation PackageNotation ::package_scope:'''word'_x not
R6800:6803 Jasmin.wsize <> U128 constr
prf 6826:6838 <> modulus_gt0_Z
binder 6853:6853 <> n:26
R6858:6860 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R6861:6867 mathcomp.word.word <> modulus def
R6869:6869 Examples.aes_hac <> n:26 var
prf 6904:6916 <> modulus_ge0_Z
binder 6931:6931 <> n:27
R6936:6939 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R6940:6946 mathcomp.word.word <> modulus def
R6948:6948 Examples.aes_hac <> n:27 var
prf 6983:6990 <> isword_Z
binder 7001:7001 <> n:28
binder 7003:7003 <> k:29
R7008:7011 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R7023:7025 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R7013:7018 mathcomp.word.word <> toword proj
R7020:7020 Examples.aes_hac <> n:28 var
R7022:7022 Examples.aes_hac <> k:29 var
R7013:7018 mathcomp.word.word <> toword proj
R7020:7020 Examples.aes_hac <> n:28 var
R7022:7022 Examples.aes_hac <> k:29 var
R7026:7032 mathcomp.word.word <> modulus def
R7034:7034 Examples.aes_hac <> n:28 var
binder 7064:7064 <> n:30
binder 7066:7066 <> k:31
R7071:7083 Coq.ssr.ssrbool <> elimT thm
R7111:7121 mathcomp.word.word <> isword_word thm
R7123:7123 Examples.aes_hac <> n:30 var
R7125:7125 Examples.aes_hac <> k:31 var
R7086:7093 mathcomp.word.word <> iswordZP thm
R7098:7103 mathcomp.word.word <> toword proj
R7105:7105 Examples.aes_hac <> k:31 var
R7095:7095 Examples.aes_hac <> n:30 var
binder 7064:7064 <> n:32
binder 7066:7066 <> k:33
R7071:7083 Coq.ssr.ssrbool <> elimT thm
R7111:7121 mathcomp.word.word <> isword_word thm
R7123:7123 Examples.aes_hac <> n:32 var
R7125:7125 Examples.aes_hac <> k:33 var
R7086:7093 mathcomp.word.word <> iswordZP thm
R7098:7103 mathcomp.word.word <> toword proj
R7105:7105 Examples.aes_hac <> k:33 var
R7095:7095 Examples.aes_hac <> n:32 var
prf 7146:7157 <> lt_add_right
binder 7168:7168 <> n:34
binder 7170:7170 <> m:35
binder 7172:7172 <> p:36
R7184:7187 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7177:7179 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R7180:7180 Examples.aes_hac <> p:36 var
R7197:7200 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7190:7192 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R7189:7189 Examples.aes_hac <> n:34 var
R7193:7193 Examples.aes_hac <> m:35 var
R7203:7205 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R7202:7202 Examples.aes_hac <> n:34 var
R7207:7209 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R7206:7206 Examples.aes_hac <> m:35 var
R7210:7210 Examples.aes_hac <> p:36 var
R7248:7257 Coq.ZArith.BinInt Z lt_trans thm
R7248:7257 Coq.ZArith.BinInt Z lt_trans thm
prf 7299:7310 <> le_add_right
binder 7321:7321 <> n:37
binder 7323:7323 <> m:38
binder 7325:7325 <> p:39
R7338:7341 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7330:7333 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R7334:7334 Examples.aes_hac <> p:39 var
R7352:7355 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7344:7347 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R7343:7343 Examples.aes_hac <> n:37 var
R7348:7348 Examples.aes_hac <> m:38 var
R7358:7361 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R7357:7357 Examples.aes_hac <> n:37 var
R7363:7365 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R7362:7362 Examples.aes_hac <> m:38 var
R7366:7366 Examples.aes_hac <> p:39 var
R7404:7413 Coq.ZArith.BinInt Z le_trans thm
R7404:7413 Coq.ZArith.BinInt Z le_trans thm
prf 7455:7463 <> modulusDZ
binder 7474:7474 <> n:40
binder 7476:7476 <> m:41
binder 7478:7478 <> p:42
R7509:7511 Coq.Init.Logic <> ::type_scope:x_'='_x not
R7483:7486 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R7482:7482 Examples.aes_hac <> n:40 var
R7487:7493 mathcomp.word.word <> modulus def
R7497:7499 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'+'_x not
R7496:7496 Examples.aes_hac <> m:41 var
R7500:7500 Examples.aes_hac <> p:42 var
R7514:7517 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R7513:7513 Examples.aes_hac <> n:40 var
R7527:7529 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R7518:7524 mathcomp.word.word <> modulus def
R7526:7526 Examples.aes_hac <> m:41 var
R7530:7536 mathcomp.word.word <> modulus def
R7538:7538 Examples.aes_hac <> p:42 var
R7578:7585 mathcomp.word.word <> modulusD thm
R7578:7585 mathcomp.word.word <> modulusD thm
R7578:7585 mathcomp.word.word <> modulusD thm
R7600:7614 mathcomp.word.word_ssrZ <> mulZE thm
R7600:7614 mathcomp.word.word_ssrZ <> mulZE thm
R7600:7614 mathcomp.word.word_ssrZ <> mulZE thm
prf 7650:7662 <> modulus_add_r
binder 7673:7673 <> n:43
binder 7675:7675 <> m:44
binder 7677:7677 <> p:45
R7702:7705 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7682:7685 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R7687:7689 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R7686:7686 Examples.aes_hac <> n:43 var
R7686:7686 Examples.aes_hac <> n:43 var
R7690:7696 mathcomp.word.word <> modulus def
R7698:7698 Examples.aes_hac <> m:44 var
R7708:7711 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R7713:7715 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R7712:7712 Examples.aes_hac <> n:43 var
R7712:7712 Examples.aes_hac <> n:43 var
R7716:7722 mathcomp.word.word <> modulus def
R7726:7728 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'+'_x not
R7725:7725 Examples.aes_hac <> m:44 var
R7729:7729 Examples.aes_hac <> p:45 var
R7822:7829 mathcomp.word.word <> modulusD thm
R7822:7829 mathcomp.word.word <> modulusD thm
R7822:7829 mathcomp.word.word <> modulusD thm
R7847:7861 mathcomp.word.word_ssrZ <> mulZE thm
R7847:7861 mathcomp.word.word_ssrZ <> mulZE thm
R7847:7861 mathcomp.word.word_ssrZ <> mulZE thm
R7912:7920 Coq.ZArith.BinInt Z mul_1_r thm
R7912:7920 Coq.ZArith.BinInt Z mul_1_r thm
R7912:7920 Coq.ZArith.BinInt Z mul_1_r thm
R7952:7959 mathcomp.word.word <> modulusS thm
R7952:7959 mathcomp.word.word <> modulusS thm
R7952:7959 mathcomp.word.word <> modulusS thm
R7976:7994 mathcomp.algebra.ssralg GRing.Theory mulr2n def
R7976:7994 mathcomp.algebra.ssralg GRing.Theory mulr2n def
R7976:7994 mathcomp.algebra.ssralg GRing.Theory mulr2n def
R8014:8028 mathcomp.word.word_ssrZ <> addZE thm
R8014:8028 mathcomp.word.word_ssrZ <> addZE thm
R8014:8028 mathcomp.word.word_ssrZ <> addZE thm
R8044:8053 Coq.ZArith.BinInt Z lt_trans thm
R8044:8053 Coq.ZArith.BinInt Z lt_trans thm
R8085:8101 Coq.ZArith.Zorder <> Zmult_lt_compat_l thm
R8085:8101 Coq.ZArith.Zorder <> Zmult_lt_compat_l thm
R8128:8141 Coq.ZArith.BinInt Z lt_add_pos_r thm
R8128:8141 Coq.ZArith.BinInt Z lt_add_pos_r thm
prf 8172:8192 <> small_modulus_smaller
binder 8203:8203 <> n:46
binder 8205:8205 <> m:47
binder 8207:8207 <> p:48
R8220:8223 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8212:8215 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R8216:8216 Examples.aes_hac <> n:46 var
R8238:8241 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8226:8228 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x_'<='_x not
R8230:8233 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x_'<='_x not
R8229:8229 Examples.aes_hac <> m:47 var
R8229:8229 Examples.aes_hac <> m:47 var
R8234:8234 Examples.aes_hac <> p:48 var
R8244:8247 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R8255:8257 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R8249:8253 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R8248:8248 Examples.aes_hac <> n:46 var
R8254:8254 Examples.aes_hac <> m:47 var
R8249:8253 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R8248:8248 Examples.aes_hac <> n:46 var
R8254:8254 Examples.aes_hac <> m:47 var
R8258:8258 Examples.aes_hac <> p:48 var
R8302:8320 Coq.ZArith.Zdiv <> Z_mod_nonneg_nonneg thm
R8302:8320 Coq.ZArith.Zdiv <> Z_mod_nonneg_nonneg thm
R8338:8349 Coq.ZArith.BinInt Z lt_le_incl thm
R8338:8349 Coq.ZArith.BinInt Z lt_le_incl thm
R8373:8385 Coq.ZArith.BinInt Z lt_le_trans thm
R8373:8385 Coq.ZArith.BinInt Z lt_le_trans thm
R8398:8412 Coq.ZArith.BinInt Z mod_pos_bound thm
R8398:8412 Coq.ZArith.BinInt Z mod_pos_bound thm
prf 8454:8467 <> mod_mod_larger
binder 8478:8478 <> n:49
binder 8480:8480 <> m:50
binder 8482:8482 <> p:51
R8495:8498 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8487:8490 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R8491:8491 Examples.aes_hac <> n:49 var
R8513:8516 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8501:8503 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x_'<='_x not
R8505:8508 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x_'<='_x not
R8504:8504 Examples.aes_hac <> m:50 var
R8504:8504 Examples.aes_hac <> m:50 var
R8509:8509 Examples.aes_hac <> p:51 var
R8531:8533 Coq.Init.Logic <> ::type_scope:x_'='_x not
R8525:8529 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R8519:8523 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R8518:8518 Examples.aes_hac <> n:49 var
R8524:8524 Examples.aes_hac <> m:50 var
R8530:8530 Examples.aes_hac <> p:51 var
R8535:8539 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R8534:8534 Examples.aes_hac <> n:49 var
R8540:8540 Examples.aes_hac <> m:50 var
R8579:8588 Coq.ZArith.Zdiv <> Zmod_small thm
R8579:8588 Coq.ZArith.Zdiv <> Zmod_small thm
R8579:8588 Coq.ZArith.Zdiv <> Zmod_small thm
R8618:8638 Examples.aes_hac <> small_modulus_smaller thm
R8618:8638 Examples.aes_hac <> small_modulus_smaller thm
prf 8684:8700 <> mod_mod_divisable
binder 8711:8711 <> n:52
binder 8713:8713 <> m:53
binder 8715:8715 <> p:54
R8727:8730 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8720:8722 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R8723:8723 Examples.aes_hac <> p:54 var
R8763:8766 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8732:8738 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R8740:8741 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 8739:8739 <> k:55
R8751:8754 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R8743:8745 Coq.Init.Logic <> ::type_scope:x_'='_x not
R8742:8742 Examples.aes_hac <> m:53 var
R8747:8749 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R8746:8746 Examples.aes_hac <> k:55 var
R8750:8750 Examples.aes_hac <> p:54 var
R8756:8758 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R8759:8759 Examples.aes_hac <> k:55 var
R8781:8783 Coq.Init.Logic <> ::type_scope:x_'='_x not
R8775:8779 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R8769:8773 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R8768:8768 Examples.aes_hac <> n:52 var
R8774:8774 Examples.aes_hac <> m:53 var
R8780:8780 Examples.aes_hac <> p:54 var
R8785:8789 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R8784:8784 Examples.aes_hac <> n:52 var
R8790:8790 Examples.aes_hac <> p:54 var
R8871:8882 Jasmin.word <> mod_pq_mod_q thm
R8871:8882 Jasmin.word <> mod_pq_mod_q thm
prf 8902:8923 <> Z_shiftl_mod_modulus_S
binder 8934:8934 <> n:56
R8943:8945 Coq.Init.Datatypes <> nat ind
binder 8937:8937 <> m:57
binder 8939:8939 <> p:58
R9001:9003 Coq.Init.Logic <> ::type_scope:x_'='_x not
R8982:8986 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R8956:8963 Coq.ZArith.BinInt Z shiftl def
R8965:8965 Examples.aes_hac <> n:56 var
R8968:8975 Coq.ZArith.BinInt Z of_nat def
R8978:8980 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'.+1' not
R8977:8977 Examples.aes_hac <> m:57 var
R8987:8993 mathcomp.word.word <> modulus def
R8997:8999 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'.+1' not
R8996:8996 Examples.aes_hac <> p:58 var
R9005:9008 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R9046:9046 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R9032:9036 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R9009:9016 Coq.ZArith.BinInt Z shiftl def
R9018:9018 Examples.aes_hac <> n:56 var
R9021:9028 Coq.ZArith.BinInt Z of_nat def
R9030:9030 Examples.aes_hac <> m:57 var
R9037:9043 mathcomp.word.word <> modulus def
R9045:9045 Examples.aes_hac <> p:58 var
R9088:9104 Coq.ZArith.Zdiv <> Zmult_mod_distr_l thm
R9088:9104 Coq.ZArith.Zdiv <> Zmult_mod_distr_l thm
R9088:9104 Coq.ZArith.Zdiv <> Zmult_mod_distr_l thm
R9141:9157 Coq.ZArith.BinInt Z shiftl_mul_pow2 thm
R9141:9157 Coq.ZArith.BinInt Z shiftl_mul_pow2 thm
R9141:9157 Coq.ZArith.BinInt Z shiftl_mul_pow2 thm
R9174:9187 Coq.ZArith.Znat Nat2Z inj_succ thm
R9174:9187 Coq.ZArith.Znat Nat2Z inj_succ thm
R9174:9187 Coq.ZArith.Znat Nat2Z inj_succ thm
R9204:9215 Coq.ZArith.BinInt Z pow_succ_r thm
R9204:9215 Coq.ZArith.BinInt Z pow_succ_r thm
R9204:9215 Coq.ZArith.BinInt Z pow_succ_r thm
R9232:9241 Coq.ZArith.BinInt Z mul_comm thm
R9232:9241 Coq.ZArith.BinInt Z mul_comm thm
R9232:9241 Coq.ZArith.BinInt Z mul_comm thm
R9261:9271 Coq.ZArith.BinInt Z mul_assoc thm
R9261:9271 Coq.ZArith.BinInt Z mul_assoc thm
R9261:9271 Coq.ZArith.BinInt Z mul_assoc thm
R9292:9301 Coq.ZArith.BinInt Z mul_comm thm
R9292:9301 Coq.ZArith.BinInt Z mul_comm thm
R9292:9301 Coq.ZArith.BinInt Z mul_comm thm
R9324:9340 Coq.ZArith.BinInt Z shiftl_mul_pow2 thm
R9324:9340 Coq.ZArith.BinInt Z shiftl_mul_pow2 thm
R9324:9340 Coq.ZArith.BinInt Z shiftl_mul_pow2 thm
R9324:9340 Coq.ZArith.BinInt Z shiftl_mul_pow2 thm
prf 9418:9441 <> Z_shiftl_mod_modulus_add
binder 9452:9452 <> n:59
R9463:9465 Coq.Init.Datatypes <> nat ind
binder 9455:9455 <> m:60
binder 9457:9457 <> p:61
binder 9459:9459 <> k:62
R9525:9527 Coq.Init.Logic <> ::type_scope:x_'='_x not
R9505:9509 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R9476:9483 Coq.ZArith.BinInt Z shiftl def
R9485:9485 Examples.aes_hac <> n:59 var
R9488:9495 Coq.ZArith.BinInt Z of_nat def
R9499:9501 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'+'_x not
R9498:9498 Examples.aes_hac <> m:60 var
R9502:9502 Examples.aes_hac <> k:62 var
R9510:9516 mathcomp.word.word <> modulus def
R9520:9522 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'+'_x not
R9519:9519 Examples.aes_hac <> p:61 var
R9523:9523 Examples.aes_hac <> k:62 var
R9537:9540 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R9578:9578 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R9528:9534 mathcomp.word.word <> modulus def
R9536:9536 Examples.aes_hac <> k:62 var
R9564:9568 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R9541:9548 Coq.ZArith.BinInt Z shiftl def
R9550:9550 Examples.aes_hac <> n:59 var
R9553:9560 Coq.ZArith.BinInt Z of_nat def
R9562:9562 Examples.aes_hac <> m:60 var
R9569:9575 mathcomp.word.word <> modulus def
R9577:9577 Examples.aes_hac <> p:61 var
R9637:9641 mathcomp.ssreflect.ssrnat <> addn0 thm
R9637:9641 mathcomp.ssreflect.ssrnat <> addn0 thm
R9637:9641 mathcomp.ssreflect.ssrnat <> addn0 thm
R9637:9641 mathcomp.ssreflect.ssrnat <> addn0 thm
R9637:9641 mathcomp.ssreflect.ssrnat <> addn0 thm
R9658:9666 Coq.ZArith.BinInt Z mul_1_l thm
R9658:9666 Coq.ZArith.BinInt Z mul_1_l thm
R9658:9666 Coq.ZArith.BinInt Z mul_1_l thm
R9703:9707 mathcomp.ssreflect.ssrnat <> addnS thm
R9703:9707 mathcomp.ssreflect.ssrnat <> addnS thm
R9703:9707 mathcomp.ssreflect.ssrnat <> addnS thm
R9703:9707 mathcomp.ssreflect.ssrnat <> addnS thm
R9703:9707 mathcomp.ssreflect.ssrnat <> addnS thm
R9724:9745 Examples.aes_hac <> Z_shiftl_mod_modulus_S thm
R9724:9745 Examples.aes_hac <> Z_shiftl_mod_modulus_S thm
R9724:9745 Examples.aes_hac <> Z_shiftl_mod_modulus_S thm
R9781:9791 Coq.ZArith.BinInt Z mul_assoc thm
R9781:9791 Coq.ZArith.BinInt Z mul_assoc thm
R9781:9791 Coq.ZArith.BinInt Z mul_assoc thm
prf 9829:9837 <> subn_diag
binder 9848:9848 <> p:63
binder 9850:9850 <> m:64
R9859:9862 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9854:9857 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'<='_x not
R9853:9853 Examples.aes_hac <> m:64 var
R9858:9858 Examples.aes_hac <> p:63 var
R9864:9866 Coq.Init.Logic <> ::type_scope:x_'='_x not
R9863:9863 Examples.aes_hac <> p:63 var
R9872:9874 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'+'_x not
R9868:9870 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'-'_x not
R9867:9867 Examples.aes_hac <> p:63 var
R9871:9871 Examples.aes_hac <> m:64 var
R9875:9875 Examples.aes_hac <> m:64 var
R9908:9915 mathcomp.ssreflect.ssrnat <> subn_eq0 thm
R9908:9915 mathcomp.ssreflect.ssrnat <> subn_eq0 thm
R9929:9933 mathcomp.ssreflect.ssrnat <> subnA thm
R9942:9946 mathcomp.ssreflect.ssrnat <> leqnn thm
R9929:9933 mathcomp.ssreflect.ssrnat <> subnA thm
R9942:9946 mathcomp.ssreflect.ssrnat <> leqnn thm
R9966:9970 mathcomp.ssreflect.ssrnat <> addKn thm
R9966:9970 mathcomp.ssreflect.ssrnat <> addKn thm
R9997:10001 mathcomp.ssreflect.ssrnat <> addn0 thm
R9997:10001 mathcomp.ssreflect.ssrnat <> addn0 thm
R9997:10001 mathcomp.ssreflect.ssrnat <> addn0 thm
R9997:10001 mathcomp.ssreflect.ssrnat <> addn0 thm
R9997:10001 mathcomp.ssreflect.ssrnat <> addn0 thm
R9997:10001 mathcomp.ssreflect.ssrnat <> addn0 thm
R9997:10001 mathcomp.ssreflect.ssrnat <> addn0 thm
R9997:10001 mathcomp.ssreflect.ssrnat <> addn0 thm
R9997:10001 mathcomp.ssreflect.ssrnat <> addn0 thm
R9997:10001 mathcomp.ssreflect.ssrnat <> addn0 thm
R9997:10001 mathcomp.ssreflect.ssrnat <> addn0 thm
R9997:10001 mathcomp.ssreflect.ssrnat <> addn0 thm
R10056:10060 mathcomp.ssreflect.ssrnat <> subn0 thm
R10056:10060 mathcomp.ssreflect.ssrnat <> subn0 thm
R10056:10060 mathcomp.ssreflect.ssrnat <> subn0 thm
prf 10088:10107 <> Z_shiftl_mod_modulus
binder 10118:10118 <> n:65
R10129:10131 Coq.Init.Datatypes <> nat ind
binder 10121:10121 <> m:66
binder 10123:10123 <> p:67
binder 10125:10125 <> k:68
R10135:10135 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10142:10146 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10137:10140 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'<='_x not
R10136:10136 Examples.aes_hac <> m:66 var
R10141:10141 Examples.aes_hac <> p:67 var
R10185:10187 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10171:10175 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R10148:10155 Coq.ZArith.BinInt Z shiftl def
R10157:10157 Examples.aes_hac <> n:65 var
R10160:10167 Coq.ZArith.BinInt Z of_nat def
R10169:10169 Examples.aes_hac <> m:66 var
R10176:10182 mathcomp.word.word <> modulus def
R10184:10184 Examples.aes_hac <> p:67 var
R10197:10200 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R10222:10222 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R10188:10194 mathcomp.word.word <> modulus def
R10196:10196 Examples.aes_hac <> m:66 var
R10202:10206 Coq.ZArith.BinInt <> ::Z_scope:x_'mod'_x not
R10201:10201 Examples.aes_hac <> n:65 var
R10207:10213 mathcomp.word.word <> modulus def
R10217:10219 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'-'_x not
R10216:10216 Examples.aes_hac <> p:67 var
R10220:10220 Examples.aes_hac <> m:66 var
R10274:10276 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'+'_x not
R10270:10272 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'-'_x not
R10304:10312 Examples.aes_hac <> subn_diag thm
R10274:10276 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'+'_x not
R10270:10272 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'-'_x not
R10304:10312 Examples.aes_hac <> subn_diag thm
R10304:10312 Examples.aes_hac <> subn_diag thm
R10345:10347 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'+'_x not
R10345:10347 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'+'_x not
R10382:10405 Examples.aes_hac <> Z_shiftl_mod_modulus_add thm
R10382:10405 Examples.aes_hac <> Z_shiftl_mod_modulus_add thm
R10757:10768 Coq.ZArith.BinInt Z lor_nonneg thm
R10737:10745 mathcomp.word.word <> word_geZ0 thm
binder 10685:10685 <> x:69
binder 10687:10687 <> y:70
R10692:10696 Coq.Init.Logic <> proj2 thm
R10699:10713 Coq.ZArith.BinInt Z shiftl_nonneg thm
R10715:10715 Examples.aes_hac <> x:69 var
R10717:10717 Examples.aes_hac <> y:70 var
binder 10628:10628 <> x:71
binder 10630:10630 <> y:72
R10635:10639 Coq.Init.Logic <> proj2 thm
R10642:10656 Coq.ZArith.BinInt Z shiftr_nonneg thm
R10658:10658 Examples.aes_hac <> x:71 var
R10660:10660 Examples.aes_hac <> y:72 var
R10593:10605 Examples.aes_hac <> modulus_ge0_Z thm
R10561:10575 Coq.ZArith.Znat Nat2Z is_nonneg thm
R10525:10543 Coq.ZArith.Zdiv <> Z_mod_nonneg_nonneg thm
R10499:10507 Coq.ZArith.Zorder <> Zle_0_pos thm
R10463:10481 Coq.ZArith.BinInt Z mul_nonneg_nonneg thm
R11099:11110 Coq.ZArith.BinInt Z shiftr_0_r thm
R11074:11086 Examples.aes_hac <> modulus_add_r thm
R11022:11034 Examples.aes_hac <> shiftr_bounds thm
R11003:11010 Examples.aes_hac <> isword_Z thm
R10960:10978 Coq.ZArith.BinInt Z mul_lt_mono_pos_l thm
R10889:10909 Examples.aes_hac <> small_modulus_smaller thm
prf 11130:11149 <> shift_left_4_byte_ok
binder 11165:11165 <> i:73
R11172:11177 Crypt.package.pkg_notation PackageNotation ::package_scope:'''word'_x not
R11178:11180 Jasmin.wsize <> U32 constr
binder 11168:11168 <> a:74
R11197:11208 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11193:11195 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'<'_x not
R11192:11192 Examples.aes_hac <> i:73 var
R11211:11214 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R11257:11270 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R11215:11222 Coq.ZArith.BinInt Z shiftl def
R11225:11233 Jasmin.word <> wunsigned def
R11235:11235 Examples.aes_hac <> a:74 var
R11239:11246 Coq.ZArith.BinInt Z of_nat def
R11250:11252 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'*'_x not
R11249:11249 Examples.aes_hac <> i:73 var
R11215:11222 Coq.ZArith.BinInt Z shiftl def
R11225:11233 Jasmin.word <> wunsigned def
R11235:11235 Examples.aes_hac <> a:74 var
R11239:11246 Coq.ZArith.BinInt Z of_nat def
R11250:11252 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'*'_x not
R11249:11249 Examples.aes_hac <> i:73 var
R11271:11277 mathcomp.word.word <> modulus def
R11279:11279 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'.+1' not
R11303:11306 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'.+1' not
R11280:11297 Jasmin.word <> wsize_size_minus_1 def
R11299:11302 Jasmin.wsize <> U128 constr
R11360:11368 Jasmin.word <> wunsigned def
R11371:11375 mathcomp.word.word <> urepr def
R11378:11380 mathcomp.ssreflect.eqtype <> val proj
R11383:11394 mathcomp.word.word <> word_subType canonstruc
R11397:11407 mathcomp.word.word <> toword proj
R11421:11433 Coq.ssr.ssrbool <> elimT thm
R11436:11443 mathcomp.word.word <> iswordZP thm
R11421:11433 Coq.ssr.ssrbool <> elimT thm
R11436:11443 mathcomp.word.word <> iswordZP thm
R11475:11489 Coq.ZArith.BinInt Z shiftl_nonneg thm
R11475:11489 Coq.ZArith.BinInt Z shiftl_nonneg thm
R11526:11542 Coq.ZArith.BinInt Z shiftl_mul_pow2 thm
R11526:11542 Coq.ZArith.BinInt Z shiftl_mul_pow2 thm
R11526:11542 Coq.ZArith.BinInt Z shiftl_mul_pow2 thm
R11567:11579 Coq.ZArith.BinInt Z lt_le_trans thm
R11567:11579 Coq.ZArith.BinInt Z lt_le_trans thm
R11599:11617 Coq.ZArith.BinInt Z mul_lt_mono_pos_r thm
R11621:11623 Coq.ZArith.BinInt <> ::Z_scope:x_'^'_x not
R11624:11631 Coq.ZArith.BinInt Z of_nat def
R11599:11617 Coq.ZArith.BinInt Z mul_lt_mono_pos_r thm
R11621:11623 Coq.ZArith.BinInt <> ::Z_scope:x_'^'_x not
R11624:11631 Coq.ZArith.BinInt Z of_nat def
R11599:11617 Coq.ZArith.BinInt Z mul_lt_mono_pos_r thm
R11621:11623 Coq.ZArith.BinInt <> ::Z_scope:x_'^'_x not
R11624:11631 Coq.ZArith.BinInt Z of_nat def
R11599:11617 Coq.ZArith.BinInt Z mul_lt_mono_pos_r thm
R11621:11623 Coq.ZArith.BinInt <> ::Z_scope:x_'^'_x not
R11624:11631 Coq.ZArith.BinInt Z of_nat def
prf 11738:11762 <> num_smaller_if_modulus_le
binder 11775:11776 <> WS:75
R11784:11789 Crypt.package.pkg_notation PackageNotation ::package_scope:'''word'_x not
R11790:11791 Examples.aes_hac <> WS:75 var
binder 11780:11780 <> x:76
binder 11794:11794 <> z:77
R11816:11819 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11808:11811 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R11798:11804 mathcomp.word.word <> modulus def
R11806:11807 Examples.aes_hac <> WS:75 var
R11812:11812 Examples.aes_hac <> z:77 var
R11822:11825 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R11836:11838 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R11826:11833 Hacspec.Hacspec_Lib_Pre <> unsigned syndef
R11835:11835 Examples.aes_hac <> x:76 var
R11826:11833 Hacspec.Hacspec_Lib_Pre <> unsigned syndef
R11835:11835 Examples.aes_hac <> x:76 var
R11839:11839 Examples.aes_hac <> z:77 var
R11899:11906 Examples.aes_hac <> isword_Z thm
R11899:11906 Examples.aes_hac <> isword_Z thm
R11922:11934 Coq.ZArith.BinInt Z lt_le_trans thm
R11946:11953 Examples.aes_hac <> isword_Z thm
R11922:11934 Coq.ZArith.BinInt Z lt_le_trans thm
R11946:11953 Examples.aes_hac <> isword_Z thm
prf 11984:11993 <> Z_lor_pow2
R12012:12012 Coq.Numbers.BinNums <> Z ind
binder 12006:12006 <> x:78
binder 12008:12008 <> y:79
R12020:12022 Coq.Init.Datatypes <> nat ind
binder 12016:12016 <> k:80
R12065:12068 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12028:12031 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R12033:12035 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R12032:12032 Examples.aes_hac <> x:78 var
R12032:12032 Examples.aes_hac <> x:78 var
R12037:12040 Coq.ZArith.BinInt <> ::Z_scope:x_'^'_x not
R12061:12061 Coq.ZArith.BinInt <> ::Z_scope:x_'^'_x not
R12041:12058 mathcomp.word.word_ssrZ <> int_to_Z def
R12060:12060 Examples.aes_hac <> k:80 var
R12108:12111 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12071:12074 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R12076:12078 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R12075:12075 Examples.aes_hac <> y:79 var
R12075:12075 Examples.aes_hac <> y:79 var
R12080:12083 Coq.ZArith.BinInt <> ::Z_scope:x_'^'_x not
R12104:12104 Coq.ZArith.BinInt <> ::Z_scope:x_'^'_x not
R12084:12101 mathcomp.word.word_ssrZ <> int_to_Z def
R12103:12103 Examples.aes_hac <> k:80 var
R12114:12117 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R12127:12129 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R12118:12122 Coq.ZArith.BinInt Z lor def
R12124:12124 Examples.aes_hac <> x:78 var
R12126:12126 Examples.aes_hac <> y:79 var
R12118:12122 Coq.ZArith.BinInt Z lor def
R12124:12124 Examples.aes_hac <> x:78 var
R12126:12126 Examples.aes_hac <> y:79 var
R12131:12134 Coq.ZArith.BinInt <> ::Z_scope:x_'^'_x not
R12155:12155 Coq.ZArith.BinInt <> ::Z_scope:x_'^'_x not
R12135:12152 mathcomp.word.word_ssrZ <> int_to_Z def
R12154:12154 Examples.aes_hac <> k:80 var
R12216:12227 Coq.ZArith.BinInt Z lor_nonneg thm
R12216:12227 Coq.ZArith.BinInt Z lor_nonneg thm
R12407:12420 Coq.ZArith.BinInt Z log2_lt_pow2 thm
R12407:12420 Coq.ZArith.BinInt Z log2_lt_pow2 thm
R12455:12468 Coq.ZArith.BinInt Z log2_lt_pow2 thm
R12455:12468 Coq.ZArith.BinInt Z log2_lt_pow2 thm
R12504:12517 Coq.ZArith.BinInt Z log2_lt_pow2 thm
R12504:12517 Coq.ZArith.BinInt Z log2_lt_pow2 thm
R12550:12559 Coq.ZArith.BinInt Z log2_lor thm
R12550:12559 Coq.ZArith.BinInt Z log2_lor thm
R12550:12559 Coq.ZArith.BinInt Z log2_lor thm
R12597:12608 Coq.ZArith.BinInt Z max_lub_lt thm
R12597:12608 Coq.ZArith.BinInt Z max_lub_lt thm
def 12665:12669 <> pdisj
R12676:12682 Crypt.package.pkg_invariants <> precond def
binder 12672:12672 <> P:81
R12693:12696 JasminSSProve.jasmin_translate <> p_id syndef
binder 12686:12689 <> s_id:82
R12706:12711 extructures.fset FSet.Exports ::type_scope:'{'_'fset'_x_'}' not
R12720:12720 extructures.fset FSet.Exports ::type_scope:'{'_'fset'_x_'}' not
R12712:12719 Crypt.package.pkg_core_definition <> Location def
binder 12700:12702 <> rhs:83
R12730:12730 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R12845:12856 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R12927:12927 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
binder 12738:12739 <> h1:84
binder 12741:12742 <> h2:85
binder 12744:12744 <> l:86
binder 12746:12746 <> a:87
binder 12748:12748 <> v:88
binder 12750:12754 <> s_id':89
R12782:12785 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12758:12760 Coq.Init.Logic <> ::type_scope:x_'='_x not
R12757:12757 Examples.aes_hac <> l:86 var
R12761:12773 JasminSSProve.jasmin_translate <> translate_var def
R12775:12779 Examples.aes_hac <> s_id':89 var
R12781:12781 Examples.aes_hac <> v:88 var
R12786:12786 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12801:12806 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12844:12844 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12791:12795 JasminSSProve.jasmin_translate <> :::x_'⪯'_x not
R12787:12790 Examples.aes_hac <> s_id:82 var
R12796:12800 Examples.aes_hac <> s_id':89 var
R12817:12820 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12807:12807 Examples.aes_hac <> P:81 var
R12809:12809 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12812:12813 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12816:12816 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12810:12811 Examples.aes_hac <> h1:84 var
R12814:12815 Examples.aes_hac <> h2:85 var
R12821:12821 Examples.aes_hac <> P:81 var
R12823:12823 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12839:12840 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12843:12843 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12824:12831 Crypt.package.pkg_heap <> set_heap def
R12833:12834 Examples.aes_hac <> h1:84 var
R12836:12836 Examples.aes_hac <> l:86 var
R12838:12838 Examples.aes_hac <> a:87 var
R12841:12842 Examples.aes_hac <> h2:85 var
binder 12864:12865 <> h1:90
binder 12867:12868 <> h2:91
binder 12870:12870 <> l:92
binder 12872:12872 <> a:93
R12884:12888 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12926:12926 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12876:12880 Coq.ssr.ssrbool <> ::bool_scope:x_'\in'_x not
R12875:12875 Examples.aes_hac <> l:92 var
R12881:12883 Examples.aes_hac <> rhs:83 var
R12899:12902 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12889:12889 Examples.aes_hac <> P:81 var
R12891:12891 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12894:12895 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12898:12898 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12892:12893 Examples.aes_hac <> h1:90 var
R12896:12897 Examples.aes_hac <> h2:91 var
R12903:12903 Examples.aes_hac <> P:81 var
R12905:12905 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12908:12909 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12925:12925 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12906:12907 Examples.aes_hac <> h1:90 var
R12910:12917 Crypt.package.pkg_heap <> set_heap def
R12919:12920 Examples.aes_hac <> h2:91 var
R12922:12922 Examples.aes_hac <> l:92 var
R12924:12924 Examples.aes_hac <> a:93 var
R12993:12999 Coq.Init.Datatypes <> is_true def
R13004:13008 Coq.ssr.ssrbool <> ::bool_scope:x_'\in'_x not
R13017:13021 extructures.fset <> ::fset_scope:x_':|:'_x not
R13009:13013 extructures.fset <> fset1 def
R12993:12999 Coq.Init.Datatypes <> is_true def
R13004:13008 Coq.ssr.ssrbool <> ::bool_scope:x_'\in'_x not
R13017:13021 extructures.fset <> ::fset_scope:x_':|:'_x not
R13009:13013 extructures.fset <> fset1 def
R13070:13076 Coq.Init.Datatypes <> is_true def
R13080:13084 Coq.ssr.ssrbool <> ::bool_scope:x_'\in'_x not
R13085:13089 extructures.fset <> fsetU def
R13070:13076 Coq.Init.Datatypes <> is_true def
R13080:13084 Coq.ssr.ssrbool <> ::bool_scope:x_'\in'_x not
R13085:13089 extructures.fset <> fsetU def
R13105:13111 extructures.fset <> fsetU1P thm
R13034:13040 extructures.fset <> fsetU1P thm
R13199:13199 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13214:13215 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13230:13230 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13200:13207 Crypt.package.pkg_heap <> set_heap def
R13216:13223 Crypt.package.pkg_heap <> set_heap def
R13199:13199 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13214:13215 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13230:13230 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13200:13207 Crypt.package.pkg_heap <> set_heap def
R13216:13223 Crypt.package.pkg_heap <> set_heap def
R13288:13288 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13303:13304 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13306:13306 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13289:13296 Crypt.package.pkg_heap <> set_heap def
R13288:13288 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13303:13304 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13306:13306 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13289:13296 Crypt.package.pkg_heap <> set_heap def
R13487:13494 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R13497:13501 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R13515:13519 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R13530:13534 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R13537:13540 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R13502:13505 Crypt.package.pkg_core_definition <> putr constr
R13520:13523 Crypt.package.pkg_core_definition <> bind def
R13487:13494 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R13497:13501 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R13515:13519 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R13530:13534 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R13537:13540 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R13502:13505 Crypt.package.pkg_core_definition <> putr constr
R13520:13523 Crypt.package.pkg_core_definition <> bind def
R13784:13789 Crypt.package.pkg_rhl <> r_bind thm
R13839:13839 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13842:13843 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13846:13846 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
binder 13844:13845 <> h0:94
binder 13840:13841 <> v0:95
binder 13839:13846 <> pat:96
R13849:13849 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13852:13853 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13856:13856 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
binder 13854:13855 <> h1:97
binder 13850:13851 <> v1:98
binder 13849:13856 <> pat:99
R13868:13871 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R13863:13865 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13861:13862 Examples.aes_hac <> v0:95 var
R13866:13867 Examples.aes_hac <> v1:98 var
R13874:13874 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13877:13878 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13881:13881 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R13875:13876 Examples.aes_hac <> h0:94 var
R13879:13880 Examples.aes_hac <> h1:97 var
binder 13810:13810 <> x:100
R13815:13818 Crypt.package.pkg_core_definition <> putr constr
R13822:13822 Examples.aes_hac <> x:100 var
R13792:13794 Crypt.package.pkg_core_definition <> ret constr
prf 13956:13976 <> rpre_hypothesis_rule'
R13984:13988 Coq.Unicode.Utf8_core <> ::type_scope:'∀'_x_'..'_x_','_x not
R14076:14083 Coq.Unicode.Utf8_core <> ::type_scope:'∀'_x_'..'_x_','_x not
binder 13989:13992 <> A₀:101
binder 13994:13997 <> A₁:102
R14012:14019 Crypt.package.pkg_core_definition <> raw_code ind
R14021:14024 Examples.aes_hac <> A₀:101 var
binder 14005:14008 <> p₀:103
R14035:14042 Crypt.package.pkg_core_definition <> raw_code ind
R14044:14047 Examples.aes_hac <> A₁:102 var
binder 14028:14031 <> p₁:104
R14063:14069 Crypt.package.pkg_invariants <> precond def
binder 14057:14059 <> pre:105
binder 14072:14075 <> post:106
R14084:14084 Coq.Unicode.Utf8_core <> ::type_scope:x_'→'_x not
R14219:14237 Coq.Unicode.Utf8_core <> ::type_scope:x_'→'_x not
R14085:14088 Coq.Unicode.Utf8_core <> ::type_scope:'∀'_x_'..'_x_','_x not
R14098:14109 Coq.Unicode.Utf8_core <> ::type_scope:'∀'_x_'..'_x_','_x not
binder 14089:14092 <> s₀:107
binder 14094:14097 <> s₁:108
R14126:14130 Coq.Unicode.Utf8_core <> ::type_scope:x_'→'_x not
R14110:14112 Examples.aes_hac <> pre:105 var
R14114:14114 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14119:14120 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14125:14125 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14115:14118 Examples.aes_hac <> s₀:107 var
R14121:14124 Examples.aes_hac <> s₁:108 var
R14131:14138 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R14188:14192 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R14197:14201 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R14206:14210 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R14215:14218 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R14139:14142 Coq.Unicode.Utf8_core <> :::'λ'_x_'..'_x_','_x not
R14157:14158 Coq.Unicode.Utf8_core <> :::'λ'_x_'..'_x_','_x not
R14143:14143 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14149:14150 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14156:14156 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
binder 14151:14155 <> s₁':109
binder 14144:14148 <> s₀':110
binder 14143:14156 <> pat:111
R14171:14175 Coq.Unicode.Utf8_core <> ::type_scope:x_'∧'_x not
R14164:14166 Coq.Init.Logic <> ::type_scope:x_'='_x not
R14159:14163 Examples.aes_hac <> s₀':110 var
R14167:14170 Examples.aes_hac <> s₀:107 var
R14181:14183 Coq.Init.Logic <> ::type_scope:x_'='_x not
R14176:14180 Examples.aes_hac <> s₁':109 var
R14184:14187 Examples.aes_hac <> s₁:108 var
R14211:14214 Examples.aes_hac <> post:106 var
R14193:14196 Examples.aes_hac <> p₀:103 var
R14202:14205 Examples.aes_hac <> p₁:104 var
R14238:14245 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R14249:14253 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R14258:14262 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R14267:14271 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R14276:14279 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R14246:14248 Examples.aes_hac <> pre:105 var
R14272:14275 Examples.aes_hac <> post:106 var
R14254:14257 Examples.aes_hac <> p₀:103 var
R14263:14266 Examples.aes_hac <> p₁:104 var
R14345:14364 Crypt.package.pkg_rhl <> rpre_hypothesis_rule thm
R14345:14364 Crypt.package.pkg_rhl <> rpre_hypothesis_rule thm
R14394:14409 Crypt.package.pkg_rhl <> rpre_weaken_rule thm
R14394:14409 Crypt.package.pkg_rhl <> rpre_weaken_rule thm
prf 14471:14496 <> rpre_weak_hypothesis_rule'
R14504:14508 Coq.Unicode.Utf8_core <> ::type_scope:'∀'_x_'..'_x_','_x not
R14596:14603 Coq.Unicode.Utf8_core <> ::type_scope:'∀'_x_'..'_x_','_x not
binder 14509:14512 <> A₀:112
binder 14514:14517 <> A₁:113
R14532:14539 Crypt.package.pkg_core_definition <> raw_code ind
R14541:14544 Examples.aes_hac <> A₀:112 var
binder 14525:14528 <> p₀:114
R14555:14562 Crypt.package.pkg_core_definition <> raw_code ind
R14564:14567 Examples.aes_hac <> A₁:113 var
binder 14548:14551 <> p₁:115
R14583:14589 Crypt.package.pkg_invariants <> precond def
binder 14577:14579 <> pre:116
binder 14592:14595 <> post:117
R14604:14604 Coq.Unicode.Utf8_core <> ::type_scope:x_'→'_x not
R14716:14734 Coq.Unicode.Utf8_core <> ::type_scope:x_'→'_x not
R14605:14608 Coq.Unicode.Utf8_core <> ::type_scope:'∀'_x_'..'_x_','_x not
R14618:14629 Coq.Unicode.Utf8_core <> ::type_scope:'∀'_x_'..'_x_','_x not
binder 14609:14612 <> s₀:118
binder 14614:14617 <> s₁:119
R14646:14650 Coq.Unicode.Utf8_core <> ::type_scope:x_'→'_x not
R14630:14632 Examples.aes_hac <> pre:116 var
R14634:14634 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14639:14640 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14645:14645 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14635:14638 Examples.aes_hac <> s₀:118 var
R14641:14644 Examples.aes_hac <> s₁:119 var
R14651:14658 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R14685:14689 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R14694:14698 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R14703:14707 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R14712:14715 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R14659:14662 Coq.Unicode.Utf8_core <> :::'λ'_x_'..'_x_','_x not
R14671:14672 Coq.Unicode.Utf8_core <> :::'λ'_x_'..'_x_','_x not
R14663:14663 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14666:14667 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14670:14670 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
binder 14668:14669 <> s1:120
binder 14664:14665 <> s0:121
binder 14663:14670 <> pat:122
R14673:14675 Examples.aes_hac <> pre:116 var
R14677:14677 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14680:14681 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14684:14684 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R14678:14679 Examples.aes_hac <> s0:121 var
R14682:14683 Examples.aes_hac <> s1:120 var
R14708:14711 Examples.aes_hac <> post:117 var
R14690:14693 Examples.aes_hac <> p₀:114 var
R14699:14702 Examples.aes_hac <> p₁:115 var
R14735:14742 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R14746:14750 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R14755:14759 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R14764:14768 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R14773:14776 Crypt.package.pkg_rhl <> ::package_scope:'⊢'_'⦃'_x_'⦄'_x_'≈'_x_'⦃'_x_'⦄' not
R14743:14745 Examples.aes_hac <> pre:116 var
R14769:14772 Examples.aes_hac <> post:117 var
R14751:14754 Examples.aes_hac <> p₀:114 var
R14760:14763 Examples.aes_hac <> p₁:115 var
R14842:14862 Examples.aes_hac <> rpre_hypothesis_rule' thm
R14842:14862 Examples.aes_hac <> rpre_hypothesis_rule' thm
R14884:14899 Crypt.package.pkg_rhl <> rpre_weaken_rule thm
R14884:14899 Crypt.package.pkg_rhl <> rpre_weaken_rule thm
prf 15002:15014 <> modulus_exact
R15031:15041 Jasmin.wsize <> wsize variant
binder 15026:15027 <> WS:123
R15049:15054 Crypt.package.pkg_notation PackageNotation ::package_scope:'''word'_x not
R15055:15056 Examples.aes_hac <> WS:123 var
binder 15045:15045 <> x:124
R15062:15065 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R15076:15078 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R15066:15073 Hacspec.Hacspec_Lib_Pre <> unsigned syndef
R15075:15075 Examples.aes_hac <> x:124 var
R15066:15073 Hacspec.Hacspec_Lib_Pre <> unsigned syndef
R15075:15075 Examples.aes_hac <> x:124 var
R15079:15085 mathcomp.word.word <> modulus def
R15087:15088 Examples.aes_hac <> WS:123 var
R15151:15163 Coq.ssr.ssrbool <> elimT thm
R15166:15173 mathcomp.word.word <> iswordZP thm
R15151:15163 Coq.ssr.ssrbool <> elimT thm
R15166:15173 mathcomp.word.word <> iswordZP thm
prf 15218:15232 <> modulus_smaller
R15249:15259 Jasmin.wsize <> wsize variant
binder 15244:15245 <> WS:125
R15267:15269 Coq.Init.Datatypes <> nat ind
binder 15263:15263 <> m:126
R15277:15282 Crypt.package.pkg_notation PackageNotation ::package_scope:'''word'_x not
R15283:15284 Examples.aes_hac <> WS:125 var
binder 15273:15273 <> x:127
R15308:15311 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R15291:15294 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R15289:15290 Examples.aes_hac <> WS:125 var
R15295:15302 Coq.ZArith.BinInt Z of_nat def
R15304:15304 Examples.aes_hac <> m:126 var
R15314:15317 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R15328:15330 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<'_x not
R15318:15325 Hacspec.Hacspec_Lib_Pre <> unsigned syndef
R15327:15327 Examples.aes_hac <> x:127 var
R15318:15325 Hacspec.Hacspec_Lib_Pre <> unsigned syndef
R15327:15327 Examples.aes_hac <> x:127 var
R15331:15337 mathcomp.word.word <> modulus def
R15339:15339 Examples.aes_hac <> m:126 var
R15402:15414 Coq.ssr.ssrbool <> elimT thm
R15417:15424 mathcomp.word.word <> iswordZP thm
R15402:15414 Coq.ssr.ssrbool <> elimT thm
R15417:15424 mathcomp.word.word <> iswordZP thm
R15474:15486 Coq.ZArith.BinInt Z lt_le_trans thm
R15474:15486 Coq.ZArith.BinInt Z lt_le_trans thm
R15518:15526 mathcomp.word.word <> modulusZE thm
R15518:15526 mathcomp.word.word <> modulusZE thm
R15518:15526 mathcomp.word.word <> modulusZE thm
R15543:15551 mathcomp.word.word <> modulusZE thm
R15543:15551 mathcomp.word.word <> modulusZE thm
R15543:15551 mathcomp.word.word <> modulusZE thm
R15567:15581 Coq.ZArith.BinInt Z pow_le_mono_r thm
R15567:15581 Coq.ZArith.BinInt Z pow_le_mono_r thm
def 17523:17542 <> unfold_translate_for
binder 17553:17553 <> v:128
binder 17555:17555 <> j:129
binder 17557:17557 <> d:130
binder 17559:17561 <> id0:131
binder 17563:17565 <> id':132
binder 17567:17567 <> y:133
R17576:17576 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17647:17657 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17893:17893 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17577:17589 JasminSSProve.jasmin_translate <> translate_for def
R17591:17591 Examples.aes_hac <> v:128 var
R17593:17597 mathcomp.ssreflect.seq <> ::seq_scope:'['_'seq'_x_'|'_x_'<-'_x_']' not
R17616:17618 mathcomp.ssreflect.seq <> ::seq_scope:'['_'seq'_x_'|'_x_'<-'_x_']' not
R17620:17623 mathcomp.ssreflect.seq <> ::seq_scope:'['_'seq'_x_'|'_x_'<-'_x_']' not
R17636:17636 mathcomp.ssreflect.seq <> ::seq_scope:'['_'seq'_x_'|'_x_'<-'_x_']' not
binder 17619:17619 <> i:134
R17600:17602 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R17603:17610 Coq.ZArith.BinInt Z of_nat def
R17612:17612 Examples.aes_hac <> i:134 var
R17624:17627 mathcomp.ssreflect.seq <> iota def
R17632:17632 Coq.Init.Datatypes <> S constr
R17634:17634 Examples.aes_hac <> d:130 var
R17629:17629 Examples.aes_hac <> j:129 var
R17638:17640 Examples.aes_hac <> id0:131 var
R17642:17642 Examples.aes_hac <> y:133 var
R17644:17646 Examples.aes_hac <> id':132 var
R17780:17789 Crypt.package.pkg_notation PackageNotation ::package_scope:x_';;'_x not
R17658:17676 JasminSSProve.jasmin_translate <> translate_write_var def
R17678:17680 Examples.aes_hac <> id0:131 var
R17682:17682 Examples.aes_hac <> v:128 var
R17686:17691 Coq.Init.Specif <> existT constr
R17693:17703 Crypt.choice_type <> choice_type ind
R17714:17724 Crypt.choice_type <> choice_type ind
binder 17710:17710 <> t:135
R17729:17739 mathcomp.ssreflect.choice Choice sort proj
R17742:17750 Crypt.choice_type <> chElement def
R17752:17752 Examples.aes_hac <> t:135 var
R17756:17760 Crypt.choice_type <> chInt constr
R17763:17770 Coq.ZArith.BinInt Z of_nat def
R17774:17776 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'.+1' not
R17773:17773 Examples.aes_hac <> j:129 var
R17790:17790 Crypt.package.pkg_notation PackageNotation ::package_scope:x_';;'_x not
R17802:17812 Crypt.package.pkg_notation PackageNotation ::package_scope:x_';;'_x not
R17791:17793 Coq.Init.Datatypes <> snd def
R17796:17796 Examples.aes_hac <> y:133 var
R17798:17800 Examples.aes_hac <> id':132 var
R17813:17825 JasminSSProve.jasmin_translate <> translate_for def
R17827:17827 Examples.aes_hac <> v:128 var
R17829:17833 mathcomp.ssreflect.seq <> ::seq_scope:'['_'seq'_x_'|'_x_'<-'_x_']' not
R17852:17854 mathcomp.ssreflect.seq <> ::seq_scope:'['_'seq'_x_'|'_x_'<-'_x_']' not
R17856:17859 mathcomp.ssreflect.seq <> ::seq_scope:'['_'seq'_x_'|'_x_'<-'_x_']' not
R17872:17872 mathcomp.ssreflect.seq <> ::seq_scope:'['_'seq'_x_'|'_x_'<-'_x_']' not
binder 17855:17855 <> i:136
R17836:17838 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R17839:17846 Coq.ZArith.BinInt Z of_nat def
R17848:17848 Examples.aes_hac <> i:136 var
R17860:17863 mathcomp.ssreflect.seq <> iota def
R17871:17871 Examples.aes_hac <> d:130 var
R17866:17866 Coq.Init.Datatypes <> S constr
R17868:17868 Examples.aes_hac <> j:129 var
R17874:17876 Examples.aes_hac <> id0:131 var
R17878:17878 Examples.aes_hac <> y:133 var
R17881:17883 Coq.Init.Datatypes <> fst def
R17886:17886 Examples.aes_hac <> y:133 var
R17888:17890 Examples.aes_hac <> id':132 var
binder 17936:17936 <> j:137
binder 17938:17938 <> n:138
R17985:18009 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18076:18076 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17941:17945 mathcomp.ssreflect.seq <> ::seq_scope:'['_'seq'_x_'|'_x_'<-'_x_']' not
R17964:17966 mathcomp.ssreflect.seq <> ::seq_scope:'['_'seq'_x_'|'_x_'<-'_x_']' not
R17968:17971 mathcomp.ssreflect.seq <> ::seq_scope:'['_'seq'_x_'|'_x_'<-'_x_']' not
R17984:17984 mathcomp.ssreflect.seq <> ::seq_scope:'['_'seq'_x_'|'_x_'<-'_x_']' not
binder 17967:17967 <> i:139
R17948:17950 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R17951:17958 Coq.ZArith.BinInt Z of_nat def
R17960:17960 Examples.aes_hac <> i:139 var
R17972:17975 mathcomp.ssreflect.seq <> iota def
R17980:17980 Coq.Init.Datatypes <> S constr
R17982:17982 Examples.aes_hac <> n:138 var
R17977:17977 Examples.aes_hac <> j:137 var
R18028:18031 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R18012:18014 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R18015:18022 Coq.ZArith.BinInt Z of_nat def
R18024:18024 Examples.aes_hac <> j:137 var
R18032:18036 mathcomp.ssreflect.seq <> ::seq_scope:'['_'seq'_x_'|'_x_'<-'_x_']' not
R18055:18057 mathcomp.ssreflect.seq <> ::seq_scope:'['_'seq'_x_'|'_x_'<-'_x_']' not
R18059:18062 mathcomp.ssreflect.seq <> ::seq_scope:'['_'seq'_x_'|'_x_'<-'_x_']' not
R18075:18075 mathcomp.ssreflect.seq <> ::seq_scope:'['_'seq'_x_'|'_x_'<-'_x_']' not
binder 18058:18058 <> i:140
R18039:18041 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R18042:18049 Coq.ZArith.BinInt Z of_nat def
R18051:18051 Examples.aes_hac <> i:140 var
R18063:18066 mathcomp.ssreflect.seq <> iota def
R18074:18074 Examples.aes_hac <> n:138 var
R18069:18069 Coq.Init.Datatypes <> S constr
R18071:18071 Examples.aes_hac <> j:137 var
binder 17936:17936 <> j:141
binder 17938:17938 <> n:142
R17985:18009 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18076:18076 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17941:17945 mathcomp.ssreflect.seq <> ::seq_scope:'['_'seq'_x_'|'_x_'<-'_x_']' not
R17964:17966 mathcomp.ssreflect.seq <> ::seq_scope:'['_'seq'_x_'|'_x_'<-'_x_']' not
R17968:17971 mathcomp.ssreflect.seq <> ::seq_scope:'['_'seq'_x_'|'_x_'<-'_x_']' not
R17984:17984 mathcomp.ssreflect.seq <> ::seq_scope:'['_'seq'_x_'|'_x_'<-'_x_']' not
binder 17967:17967 <> i:143
R17948:17950 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R17951:17958 Coq.ZArith.BinInt Z of_nat def
R17960:17960 Examples.aes_hac <> i:143 var
R17972:17975 mathcomp.ssreflect.seq <> iota def
R17980:17980 Coq.Init.Datatypes <> S constr
R17982:17982 Examples.aes_hac <> n:142 var
R17977:17977 Examples.aes_hac <> j:141 var
R18028:18031 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R18012:18014 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R18015:18022 Coq.ZArith.BinInt Z of_nat def
R18024:18024 Examples.aes_hac <> j:141 var
R18032:18036 mathcomp.ssreflect.seq <> ::seq_scope:'['_'seq'_x_'|'_x_'<-'_x_']' not
R18055:18057 mathcomp.ssreflect.seq <> ::seq_scope:'['_'seq'_x_'|'_x_'<-'_x_']' not
R18059:18062 mathcomp.ssreflect.seq <> ::seq_scope:'['_'seq'_x_'|'_x_'<-'_x_']' not
R18075:18075 mathcomp.ssreflect.seq <> ::seq_scope:'['_'seq'_x_'|'_x_'<-'_x_']' not
binder 18058:18058 <> i:144
R18039:18041 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R18042:18049 Coq.ZArith.BinInt Z of_nat def
R18051:18051 Examples.aes_hac <> i:144 var
R18063:18066 mathcomp.ssreflect.seq <> iota def
R18074:18074 Examples.aes_hac <> n:142 var
R18069:18069 Coq.Init.Datatypes <> S constr
R18071:18071 Examples.aes_hac <> j:141 var
R18121:18133 JasminSSProve.jasmin_translate <> translate_for def
R18142:18154 JasminSSProve.jasmin_translate <> translate_for def
R18142:18154 JasminSSProve.jasmin_translate <> translate_for def
R18192:18196 JasminSSProve.jasmin_translate JasminNotation totce syndef
R18199:18213 JasminSSProve.jasmin_translate <> translate_value def
R18216:18226 Jasmin.values <> Vint constr
R18230:18232 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R18233:18240 Coq.ZArith.BinInt Z of_nat def
R18261:18266 Coq.Init.Specif <> existT constr
R18268:18278 Crypt.choice_type <> choice_type ind
R18289:18299 Crypt.choice_type <> choice_type ind
binder 18285:18285 <> t:145
R18304:18314 mathcomp.ssreflect.choice Choice sort proj
R18317:18325 Crypt.choice_type <> chElement def
R18327:18327 Examples.aes_hac <> t:145 var
R18331:18335 Crypt.choice_type <> chInt constr
R18338:18345 Coq.ZArith.BinInt Z of_nat def
R18349:18351 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'.+1' not
R18192:18196 JasminSSProve.jasmin_translate JasminNotation totce syndef
R18199:18213 JasminSSProve.jasmin_translate <> translate_value def
R18216:18226 Jasmin.values <> Vint constr
R18230:18232 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R18233:18240 Coq.ZArith.BinInt Z of_nat def
R18261:18266 Coq.Init.Specif <> existT constr
R18268:18278 Crypt.choice_type <> choice_type ind
R18289:18299 Crypt.choice_type <> choice_type ind
binder 18285:18285 <> t:146
R18304:18314 mathcomp.ssreflect.choice Choice sort proj
R18317:18325 Crypt.choice_type <> chElement def
R18327:18327 Examples.aes_hac <> t:146 var
R18331:18335 Crypt.choice_type <> chInt constr
R18338:18345 Coq.ZArith.BinInt Z of_nat def
R18349:18351 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'.+1' not
R18408:18448 JasminSSProve.jasmin_translate <> coerce_to_choice_type_clause_1_equation_1 def
R18462:18493 JasminSSProve.jasmin_translate <> coerce_to_choice_type_equation_1 def
R18504:18526 JasminSSProve.jasmin_translate <> coerce_to_choice_type_K thm
R18408:18448 JasminSSProve.jasmin_translate <> coerce_to_choice_type_clause_1_equation_1 def
R18544:18561 Coq.ZArith.Znat <> Zpos_P_of_succ_nat thm
R18544:18561 Coq.ZArith.Znat <> Zpos_P_of_succ_nat thm
R18544:18561 Coq.ZArith.Znat <> Zpos_P_of_succ_nat thm
R18577:18582 Coq.ZArith.BinInt Z succ def
R18599:18608 Coq.ZArith.BinInt Z add_comm thm
R18599:18608 Coq.ZArith.BinInt Z add_comm thm
R18599:18608 Coq.ZArith.BinInt Z add_comm thm
prf 25194:25219 <> nat_to_be_range_is_subword
R25236:25246 Jasmin.wsize <> wsize variant
binder 25231:25232 <> WS:147
R25259:25269 Jasmin.wsize <> wsize variant
binder 25250:25255 <> WS_inp:148
R25278:25280 Hacspec.Hacspec_Lib_Pre <> int syndef
R25282:25287 Examples.aes_hac <> WS_inp:148 var
binder 25273:25273 <> n:149
binder 25290:25290 <> i:150
R25303:25306 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'<='_x not
R25301:25302 Examples.aes_hac <> WS:147 var
R25307:25312 Examples.aes_hac <> WS_inp:148 var
binder 25294:25297 <> H_WS:151
R25357:25359 Coq.Init.Logic <> ::type_scope:x_'='_x not
R25319:25322 Hacspec.Hacspec_Lib_Pre <> repr syndef
R25324:25325 Examples.aes_hac <> WS:147 var
R25328:25339 Hacspec.Hacspec_Lib_Pre <> nat_be_range def
R25341:25342 Examples.aes_hac <> WS:147 var
R25345:25350 mathcomp.word.word <> toword proj
R25352:25352 Examples.aes_hac <> n:149 var
R25355:25355 Examples.aes_hac <> i:150 var
R25360:25371 mathcomp.word.word <> subword def
R25385:25385 Examples.aes_hac <> n:149 var
R25382:25383 Examples.aes_hac <> WS:147 var
R25375:25377 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'*'_x not
R25374:25374 Examples.aes_hac <> i:150 var
R25378:25379 Examples.aes_hac <> WS:147 var
R25420:25427 Jasmin.word <> word_ext thm
R25420:25427 Jasmin.word <> word_ext thm
R25450:25461 Hacspec.Hacspec_Lib_Pre <> nat_be_range def
R25478:25480 Coq.ZArith.BinInt <> ::Z_scope:x_'^'_x not
R25493:25499 mathcomp.word.word <> modulus def
R25478:25480 Coq.ZArith.BinInt <> ::Z_scope:x_'^'_x not
R25493:25499 mathcomp.word.word <> modulus def
R25552:25558 mathcomp.word.word <> modulus def
R25595:25597 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R25574:25580 mathcomp.word.word <> modulus def
R25589:25591 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'-'_x not
R25598:25604 mathcomp.word.word <> modulus def
R25552:25558 mathcomp.word.word <> modulus def
R25595:25597 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R25574:25580 mathcomp.word.word <> modulus def
R25589:25591 mathcomp.ssreflect.ssrnat <> ::nat_scope:x_'-'_x not
R25598:25604 mathcomp.word.word <> modulus def
R25658:25669 Jasmin.word <> mod_pq_mod_q thm
R25658:25669 Jasmin.word <> mod_pq_mod_q thm
R25658:25669 Jasmin.word <> mod_pq_mod_q thm
R25705:25712 Coq.ZArith.Zdiv <> Zmod_mod thm
R25705:25712 Coq.ZArith.Zdiv <> Zmod_mod thm
R25705:25712 Coq.ZArith.Zdiv <> Zmod_mod thm
R25705:25712 Coq.ZArith.Zdiv <> Zmod_mod thm
R25743:25759 Coq.ZArith.BinInt Z shiftr_div_pow2 thm
R25743:25759 Coq.ZArith.BinInt Z shiftr_div_pow2 thm
R25743:25759 Coq.ZArith.BinInt Z shiftr_div_pow2 thm
R25743:25759 Coq.ZArith.BinInt Z shiftr_div_pow2 thm
R25787:25799 Coq.ZArith.Znat Nat2Z inj_mul thm
R25787:25799 Coq.ZArith.Znat Nat2Z inj_mul thm
R25787:25799 Coq.ZArith.Znat Nat2Z inj_mul thm
prf 25868:25881 <> rebuild_128_eq
R25911:25916 Crypt.package.pkg_notation PackageNotation ::package_scope:'''word'_x not
R25917:25919 Jasmin.wsize <> U32 constr
binder 25897:25898 <> v0:152
binder 25900:25901 <> v1:153
binder 25903:25904 <> v2:154
binder 25906:25907 <> v3:155
binder 25937:25938 <> L1:156
binder 25940:25941 <> L2:157
binder 25943:25944 <> L3:158
binder 25946:25947 <> L4:159
binder 25949:25950 <> I1:160
binder 25952:25953 <> I2:161
binder 25955:25956 <> I3:162
binder 25958:25959 <> I4:163
R25998:26000 Coq.Init.Logic <> ::type_scope:x_'='_x not
R25968:25975 Jasmin.word <> make_vec def
R25979:25979 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R25982:25984 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R25987:25989 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R25992:25994 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R25997:25997 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R25980:25981 Examples.aes_hac <> v0:152 var
R25985:25986 Examples.aes_hac <> v1:153 var
R25990:25991 Examples.aes_hac <> v2:154 var
R25995:25996 Examples.aes_hac <> v3:155 var
R26001:26007 Hacspec.ChoiceEquality <> is_pure meth
R26010:26021 Examples.Hacspec_aes_jazz <> rebuild_u128 def
R26156:26163 Hacspec.ChoiceEquality <> ret_both def
R26165:26166 Examples.aes_hac <> v3:155 var
R26142:26149 Hacspec.ChoiceEquality <> ret_both def
R26151:26152 Examples.aes_hac <> v2:154 var
R26128:26135 Hacspec.ChoiceEquality <> ret_both def
R26137:26138 Examples.aes_hac <> v1:153 var
R26114:26121 Hacspec.ChoiceEquality <> ret_both def
R26123:26124 Examples.aes_hac <> v0:152 var
R26109:26110 Examples.aes_hac <> I4:163 var
R26098:26099 Examples.aes_hac <> I3:162 var
R26086:26087 Examples.aes_hac <> I2:161 var
R26075:26076 Examples.aes_hac <> I1:160 var
R26064:26065 Examples.aes_hac <> L4:159 var
R26053:26054 Examples.aes_hac <> L3:158 var
R26041:26042 Examples.aes_hac <> L2:157 var
R26030:26031 Examples.aes_hac <> L1:156 var
R26208:26230 Examples.Hacspec_aes_jazz <> rebuild_u128_equation_1 def
R26208:26230 Examples.Hacspec_aes_jazz <> rebuild_u128_equation_1 def
R26208:26230 Examples.Hacspec_aes_jazz <> rebuild_u128_equation_1 def
R26273:26293 Hacspec.ChoiceEquality <> lift2_both_equation_1 def
R26273:26293 Hacspec.ChoiceEquality <> lift2_both_equation_1 def
R26273:26293 Hacspec.ChoiceEquality <> lift2_both_equation_1 def
R26273:26293 Hacspec.ChoiceEquality <> lift2_both_equation_1 def
R26273:26293 Hacspec.ChoiceEquality <> lift2_both_equation_1 def
R26273:26293 Hacspec.ChoiceEquality <> lift2_both_equation_1 def
R26307:26333 Hacspec.Hacspec_Lib_Pre <> shift_left_ def
R26347:26353 Hacspec.ChoiceEquality <> is_pure meth
R26388:26404 Hacspec.Hacspec_Lib <> int_or_equation_1 def
R26388:26404 Hacspec.Hacspec_Lib <> int_or_equation_1 def
R26388:26404 Hacspec.Hacspec_Lib <> int_or_equation_1 def
R26388:26404 Hacspec.Hacspec_Lib <> int_or_equation_1 def
R26388:26404 Hacspec.Hacspec_Lib <> int_or_equation_1 def
R26388:26404 Hacspec.Hacspec_Lib <> int_or_equation_1 def
R26418:26439 Jasmin.word <> wor def
R26488:26508 Hacspec.ChoiceEquality <> lift2_both_equation_1 def
R26488:26508 Hacspec.ChoiceEquality <> lift2_both_equation_1 def
R26488:26508 Hacspec.ChoiceEquality <> lift2_both_equation_1 def
R26488:26508 Hacspec.ChoiceEquality <> lift2_both_equation_1 def
R26488:26508 Hacspec.ChoiceEquality <> lift2_both_equation_1 def
R26488:26508 Hacspec.ChoiceEquality <> lift2_both_equation_1 def
R26518:26526 Hacspec.ChoiceEquality <> lift_both def
R26548:26555 Jasmin.word <> make_vec def
R26569:26574 mathcomp.word.word <> wcat_r def
R26588:26595 Jasmin.word <> word_ext thm
R26588:26595 Jasmin.word <> word_ext thm
R26611:26622 Coq.ZArith.BinInt Z shiftl_0_l thm
R26611:26622 Coq.ZArith.BinInt Z shiftl_0_l thm
R26611:26622 Coq.ZArith.BinInt Z shiftl_0_l thm
R26637:26645 Coq.ZArith.BinInt Z lor_0_r thm
R26637:26645 Coq.ZArith.BinInt Z lor_0_r thm
R26637:26645 Coq.ZArith.BinInt Z lor_0_r thm
R26661:26672 Coq.ZArith.BinInt Z shiftl_lor thm
R26661:26672 Coq.ZArith.BinInt Z shiftl_lor thm
R26661:26672 Coq.ZArith.BinInt Z shiftl_lor thm
R26661:26672 Coq.ZArith.BinInt Z shiftl_lor thm
R26661:26672 Coq.ZArith.BinInt Z shiftl_lor thm
R26661:26672 Coq.ZArith.BinInt Z shiftl_lor thm
R26718:26732 Coq.ZArith.BinInt Z shiftl_shiftl thm
R26718:26732 Coq.ZArith.BinInt Z shiftl_shiftl thm
R26718:26732 Coq.ZArith.BinInt Z shiftl_shiftl thm
R26718:26732 Coq.ZArith.BinInt Z shiftl_shiftl thm
R26718:26732 Coq.ZArith.BinInt Z shiftl_shiftl thm
R26718:26732 Coq.ZArith.BinInt Z shiftl_shiftl thm
R26718:26732 Coq.ZArith.BinInt Z shiftl_shiftl thm
R26718:26732 Coq.ZArith.BinInt Z shiftl_shiftl thm
R26718:26732 Coq.ZArith.BinInt Z shiftl_shiftl thm
R26758:26760 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R26758:26760 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R26779:26782 Jasmin.word <> wshl def
R26785:26787 mathcomp.word.word <> lsl def
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26809:26822 Jasmin.word <> wunsigned_repr thm
R26837:26846 Coq.ZArith.Zdiv <> Zmod_small thm
R26837:26846 Coq.ZArith.Zdiv <> Zmod_small thm
R26837:26846 Coq.ZArith.Zdiv <> Zmod_small thm
R26861:26870 Coq.ZArith.Zdiv <> Zmod_small thm
R26861:26870 Coq.ZArith.Zdiv <> Zmod_small thm
R26861:26870 Coq.ZArith.Zdiv <> Zmod_small thm
R26885:26898 Examples.aes_hac <> mod_mod_larger thm
R26885:26898 Examples.aes_hac <> mod_mod_larger thm
R26885:26898 Examples.aes_hac <> mod_mod_larger thm
R26913:26922 Coq.ZArith.Zdiv <> Zmod_small thm
R26913:26922 Coq.ZArith.Zdiv <> Zmod_small thm
R26913:26922 Coq.ZArith.Zdiv <> Zmod_small thm
R26937:26946 Coq.ZArith.Zdiv <> Zmod_small thm
R26937:26946 Coq.ZArith.Zdiv <> Zmod_small thm
R26937:26946 Coq.ZArith.Zdiv <> Zmod_small thm
R26961:26974 Examples.aes_hac <> mod_mod_larger thm
R26961:26974 Examples.aes_hac <> mod_mod_larger thm
R26961:26974 Examples.aes_hac <> mod_mod_larger thm
R26989:26998 Coq.ZArith.Zdiv <> Zmod_small thm
R26989:26998 Coq.ZArith.Zdiv <> Zmod_small thm
R26989:26998 Coq.ZArith.Zdiv <> Zmod_small thm
R27013:27022 Coq.ZArith.Zdiv <> Zmod_small thm
R27013:27022 Coq.ZArith.Zdiv <> Zmod_small thm
R27013:27022 Coq.ZArith.Zdiv <> Zmod_small thm
R27037:27050 Examples.aes_hac <> mod_mod_larger thm
R27037:27050 Examples.aes_hac <> mod_mod_larger thm
R27037:27050 Examples.aes_hac <> mod_mod_larger thm
R27065:27074 Coq.ZArith.Zdiv <> Zmod_small thm
R27065:27074 Coq.ZArith.Zdiv <> Zmod_small thm
R27065:27074 Coq.ZArith.Zdiv <> Zmod_small thm
R27089:27098 Coq.ZArith.Zdiv <> Zmod_small thm
R27089:27098 Coq.ZArith.Zdiv <> Zmod_small thm
R27089:27098 Coq.ZArith.Zdiv <> Zmod_small thm
R27112:27119 Jasmin.word <> wor def
R27122:27124 mathcomp.word.word <> wor def
R27127:27132 mathcomp.word.word <> toword proj
R27135:27140 mathcomp.word.word <> mkword def
R27155:27164 Coq.ZArith.Zdiv <> Zmod_small thm
R27155:27164 Coq.ZArith.Zdiv <> Zmod_small thm
R27155:27164 Coq.ZArith.Zdiv <> Zmod_small thm
R27179:27188 Coq.ZArith.Zdiv <> Zmod_small thm
R27179:27188 Coq.ZArith.Zdiv <> Zmod_small thm
R27179:27188 Coq.ZArith.Zdiv <> Zmod_small thm
R27203:27212 Coq.ZArith.Zdiv <> Zmod_small thm
R27203:27212 Coq.ZArith.Zdiv <> Zmod_small thm
R27203:27212 Coq.ZArith.Zdiv <> Zmod_small thm
R27252:27264 Examples.aes_hac <> shiftl_bounds thm
R27252:27264 Examples.aes_hac <> shiftl_bounds thm
R27252:27264 Examples.aes_hac <> shiftl_bounds thm
R27252:27264 Examples.aes_hac <> shiftl_bounds thm
R27252:27264 Examples.aes_hac <> shiftl_bounds thm
R27252:27264 Examples.aes_hac <> shiftl_bounds thm
R27252:27264 Examples.aes_hac <> shiftl_bounds thm
R27252:27264 Examples.aes_hac <> shiftl_bounds thm
R27252:27264 Examples.aes_hac <> shiftl_bounds thm
R27252:27264 Examples.aes_hac <> shiftl_bounds thm
R27252:27264 Examples.aes_hac <> shiftl_bounds thm
R27252:27264 Examples.aes_hac <> shiftl_bounds thm
R27252:27264 Examples.aes_hac <> shiftl_bounds thm
R27252:27264 Examples.aes_hac <> shiftl_bounds thm
R27252:27264 Examples.aes_hac <> shiftl_bounds thm
R27252:27264 Examples.aes_hac <> shiftl_bounds thm
R27252:27264 Examples.aes_hac <> shiftl_bounds thm
R27252:27264 Examples.aes_hac <> shiftl_bounds thm
R27292:27316 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27318:27320 Jasmin.wsize <> U32 constr
R27292:27316 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27318:27320 Jasmin.wsize <> U32 constr
R27292:27316 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27318:27320 Jasmin.wsize <> U32 constr
R27292:27316 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27318:27320 Jasmin.wsize <> U32 constr
R27292:27316 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27318:27320 Jasmin.wsize <> U32 constr
R27292:27316 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27318:27320 Jasmin.wsize <> U32 constr
R27292:27316 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27318:27320 Jasmin.wsize <> U32 constr
R27292:27316 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27318:27320 Jasmin.wsize <> U32 constr
R27292:27316 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27318:27320 Jasmin.wsize <> U32 constr
R27292:27316 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27318:27320 Jasmin.wsize <> U32 constr
R27292:27316 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27318:27320 Jasmin.wsize <> U32 constr
R27292:27316 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27318:27320 Jasmin.wsize <> U32 constr
R27292:27316 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27318:27320 Jasmin.wsize <> U32 constr
R27292:27316 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27318:27320 Jasmin.wsize <> U32 constr
R27292:27316 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27318:27320 Jasmin.wsize <> U32 constr
R27292:27316 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27318:27320 Jasmin.wsize <> U32 constr
R27292:27316 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27318:27320 Jasmin.wsize <> U32 constr
R27292:27316 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27318:27320 Jasmin.wsize <> U32 constr
R27292:27316 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27318:27320 Jasmin.wsize <> U32 constr
R27292:27316 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27318:27320 Jasmin.wsize <> U32 constr
R27292:27316 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27318:27320 Jasmin.wsize <> U32 constr
R27367:27375 mathcomp.word.word <> modulusZE thm
R27385:27394 Examples.aes_hac <> Z_lor_pow2 thm
R27409:27417 mathcomp.word.word <> modulusZE thm
R27367:27375 mathcomp.word.word <> modulusZE thm
R27367:27375 mathcomp.word.word <> modulusZE thm
R27385:27394 Examples.aes_hac <> Z_lor_pow2 thm
R27409:27417 mathcomp.word.word <> modulusZE thm
R27409:27417 mathcomp.word.word <> modulusZE thm
R27409:27417 mathcomp.word.word <> modulusZE thm
R27409:27417 mathcomp.word.word <> modulusZE thm
R27367:27375 mathcomp.word.word <> modulusZE thm
R27367:27375 mathcomp.word.word <> modulusZE thm
R27385:27394 Examples.aes_hac <> Z_lor_pow2 thm
R27367:27375 mathcomp.word.word <> modulusZE thm
R27367:27375 mathcomp.word.word <> modulusZE thm
R27385:27394 Examples.aes_hac <> Z_lor_pow2 thm
R27409:27417 mathcomp.word.word <> modulusZE thm
R27409:27417 mathcomp.word.word <> modulusZE thm
R27409:27417 mathcomp.word.word <> modulusZE thm
R27409:27417 mathcomp.word.word <> modulusZE thm
R27367:27375 mathcomp.word.word <> modulusZE thm
R27367:27375 mathcomp.word.word <> modulusZE thm
R27385:27394 Examples.aes_hac <> Z_lor_pow2 thm
R27367:27375 mathcomp.word.word <> modulusZE thm
R27367:27375 mathcomp.word.word <> modulusZE thm
R27385:27394 Examples.aes_hac <> Z_lor_pow2 thm
R27409:27417 mathcomp.word.word <> modulusZE thm
R27409:27417 mathcomp.word.word <> modulusZE thm
R27409:27417 mathcomp.word.word <> modulusZE thm
R27409:27417 mathcomp.word.word <> modulusZE thm
R27367:27375 mathcomp.word.word <> modulusZE thm
R27367:27375 mathcomp.word.word <> modulusZE thm
R27385:27394 Examples.aes_hac <> Z_lor_pow2 thm
R27367:27375 mathcomp.word.word <> modulusZE thm
R27367:27375 mathcomp.word.word <> modulusZE thm
R27385:27394 Examples.aes_hac <> Z_lor_pow2 thm
R27446:27470 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27472:27474 Jasmin.wsize <> U32 constr
R27446:27470 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27472:27474 Jasmin.wsize <> U32 constr
R27446:27470 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27472:27474 Jasmin.wsize <> U32 constr
R27446:27470 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27472:27474 Jasmin.wsize <> U32 constr
R27446:27470 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27472:27474 Jasmin.wsize <> U32 constr
R27510:27527 mathcomp.word.word_ssrZ <> int_to_Z def
R27510:27527 mathcomp.word.word_ssrZ <> int_to_Z def
R27575:27592 mathcomp.word.word_ssrZ <> int_to_Z def
R27575:27592 mathcomp.word.word_ssrZ <> int_to_Z def
R27640:27657 mathcomp.word.word_ssrZ <> int_to_Z def
R27640:27657 mathcomp.word.word_ssrZ <> int_to_Z def
R27695:27707 Examples.aes_hac <> shiftl_bounds thm
R27695:27707 Examples.aes_hac <> shiftl_bounds thm
R27695:27707 Examples.aes_hac <> shiftl_bounds thm
R27695:27707 Examples.aes_hac <> shiftl_bounds thm
R27748:27772 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27774:27776 Jasmin.wsize <> U32 constr
R27748:27772 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27774:27776 Jasmin.wsize <> U32 constr
R27748:27772 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27774:27776 Jasmin.wsize <> U32 constr
R27748:27772 Examples.aes_hac <> num_smaller_if_modulus_le thm
R27774:27776 Jasmin.wsize <> U32 constr
