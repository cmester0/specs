(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

(*Not implemented yet? todo(item)*)

Require Import Hacspec_hmac.

Require Import Hacspec_lib.

Require Import Hacspec_sha256.

Definition HASH_LEN : uint_size :=
  (@repr WORDSIZE32 256)./(@repr WORDSIZE32 8).

Inductive HkdfError_t : Type :=
| InvalidOutputLengthHkdfError_t.

Notation HkdfByteSeqResult_t := (Result_t (Seq_t U8_t) (HkdfError_t)).

Definition extract (salt : Seq_t U8_t) (ikm : Seq_t U8_t) : PRK_t :=
  let salt_or_zero := (new_seq HASH_LEN) : Seq_t U8_t in
  let salt_or_zero := (if
      (len salt)>.?(@repr WORDSIZE32 0)
    then
      from_seq salt
    else
      salt_or_zero) : Seq_t U8_t in
  from_seq (hmac salt_or_zero ikm).

Definition build_hmac_txt (t : Seq_t U8_t) (info : Seq_t U8_t) (iteration : U8_t) : Seq_t U8_t :=
  let out := (new_seq (((len t).+(len info)).+(@repr WORDSIZE32 1))) : Seq_t U8_t in
  let out := (update out (@repr WORDSIZE32 0) t) : Seq_t U8_t in
  let out := (update out (len t) info) : Seq_t U8_t in
  let out := (update_at out ((len t).+(len info)) iteration) : Seq_t U8_t in
  out.

Definition div_ceil (a : uint_size) (b : uint_size) : uint_size :=
  let q := (a./b) : uint_size in
  let q := (if
      (a.%b)<>(@repr WORDSIZE32 0)
    then
      let q := (q.+(@repr WORDSIZE32 1)) : uint_size in
      q
    else
      q) : uint_size in
  q.

Definition check_output_limit (l : uint_size) : Result_t (uint_size) (HkdfError_t) :=
  let n := (div_ceil l HASH_LEN) : uint_size in
  if
    n<=.?(@repr WORDSIZE32 255)
  then
    Ok n
  else
    Err InvalidOutputLengthHkdfError_t.

Definition expand (prk : Seq_t U8_t) (info : Seq_t U8_t) (l : uint_size) : Result_t (Seq_t U8_t) (HkdfError_t) :=
  let n := (from_residual (check_output_limit l)) : Result_t (Seq_t U8_t) (HkdfError_t) in
  let t_i := (new) : PRK_t in
  let t := (new_seq (n.*HASH_SIZE)) : Seq_t U8_t in
  let '(t,t_i) := (fold (into_iter (Build_Range_t (@repr WORDSIZE32 0)n)) (t,t_i) (fun i '(t,t_i) =>
      let hmac_txt_in := (if
          i=.?(@repr WORDSIZE32 0)
        then
          build_hmac_txt (new_seq (@repr WORDSIZE32 0)) info (secret ((cast i).+(@repr WORDSIZE8 1)))
        else
          build_hmac_txt (from_seq t_i) info (secret ((cast i).+(@repr WORDSIZE8 1)))) : Seq_t U8_t in
      let t_i := (hmac prk hmac_txt_in) : PRK_t in
      let t := (update t (i.*(len t_i)) t_i) : Seq_t U8_t in
      (t,t_i))) : (Seq_t U8_t Ã— PRK_t) in
  Ok (slice t (@repr WORDSIZE32 0) l).
