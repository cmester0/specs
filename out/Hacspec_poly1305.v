(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

(*Not implemented yet? todo(item)*)

Require Import Hacspec_lib.

Notation PolyKey_t := (nseq int8 32).
Definition PolyKey : PolyKey_t -> PolyKey_t :=
  id.

Definition BLOCKSIZE : uint_size :=
  (@repr WORDSIZE32 16).

Notation PolyBlock_t := (nseq int8 16).
Definition PolyBlock : PolyBlock_t -> PolyBlock_t :=
  id.

Notation Poly1305Tag_t := (nseq int8 16).
Definition Poly1305Tag : Poly1305Tag_t -> Poly1305Tag_t :=
  id.

Notation SubBlock_t := (Seq_t U8_t).

Notation BlockIndex_t := (uint_size).

Notation FieldCanvas := (nseq int8 131).
Notation FieldElement_t := (nat_mod 0x03fffffffffffffffffffffffffffffffb).
Definition FieldElement : FieldElement_t -> FieldElement_t :=
  id.

Notation PolyState_t := ((FieldElement_t × FieldElement_t × PolyKey_t)).

Definition poly1305_encode_r (b : PolyBlock_t) : FieldElement_t :=
  let n := (uint128_from_le_bytes (from_seq b)) : U128_t in
  let n := (n.&(secret (@repr WORDSIZE128 21267647620597763993911028882763415551))) : _ in
  from_secret_literal n.

Definition poly1305_encode_block (b : PolyBlock_t) : _ :=
  let n := (uint128_from_le_bytes (from_seq b)) : U128_t in
  let f := (from_secret_literal n) : FieldElement_t in
  f.+(pow2 (@repr WORDSIZE32 128)).

Definition poly1305_encode_last (pad_len : uint_size) (b : Seq_t U8_t) : _ :=
  let n := (uint128_from_le_bytes (from_slice b (@repr WORDSIZE32 0) (len b))) : U128_t in
  let f := (from_secret_literal n) : FieldElement_t in
  f.+(pow2 ((@repr WORDSIZE32 8).*pad_len)).

Definition poly1305_init (k : PolyKey_t) : (FieldElement_t × FieldElement_t × PolyKey_t) :=
  let r := (poly1305_encode_r (from_slice k (@repr WORDSIZE32 0) (@repr WORDSIZE32 16))) : FieldElement_t in
  (zero,r,k).

Definition poly1305_update_block (b : PolyBlock_t) (st : (FieldElement_t × FieldElement_t × PolyKey_t)) : (FieldElement_t × FieldElement_t × PolyKey_t) :=
  let '(acc,r,k) := (st) : (FieldElement_t × FieldElement_t × PolyKey_t) in
  (((poly1305_encode_block b).+acc).*r,r,k).

Definition poly1305_update_blocks (m : Seq_t U8_t) (st : (FieldElement_t × FieldElement_t × PolyKey_t)) : (FieldElement_t × FieldElement_t × PolyKey_t) :=
  let st := (st) : (FieldElement_t × FieldElement_t × PolyKey_t) in
  let n_blocks := ((len m)./BLOCKSIZE) : uint_size in
  let st := (fold (into_iter (Build_Range_t (@repr WORDSIZE32 0)n_blocks)) st (fun i st =>
      let block := (from_seq (get_exact_chunk m BLOCKSIZE i)) : PolyBlock_t in
      let st := (poly1305_update_block block st) : (FieldElement_t × FieldElement_t × PolyKey_t) in
      st)) : (FieldElement_t × FieldElement_t × PolyKey_t) in
  st.

Definition poly1305_update_last (pad_len : uint_size) (b : Seq_t U8_t) (st : (FieldElement_t × FieldElement_t × PolyKey_t)) : (FieldElement_t × FieldElement_t × PolyKey_t) :=
  let st := (st) : (FieldElement_t × FieldElement_t × PolyKey_t) in
  let st := (if
      (len b)<>(@repr WORDSIZE32 0)
    then
      let '(acc,r,k) := (st) : (FieldElement_t × FieldElement_t × PolyKey_t) in
      let st := ((((poly1305_encode_last pad_len b).+acc).*r,r,k)) : (FieldElement_t × FieldElement_t × PolyKey_t) in
      st
    else
      st) : (FieldElement_t × FieldElement_t × PolyKey_t) in
  st.

Definition poly1305_update (m : Seq_t U8_t) (st : (FieldElement_t × FieldElement_t × PolyKey_t)) : (FieldElement_t × FieldElement_t × PolyKey_t) :=
  let st := (poly1305_update_blocks m st) : (FieldElement_t × FieldElement_t × PolyKey_t) in
  let last := (get_remainder_chunk m BLOCKSIZE) : Seq_t U8_t in
  poly1305_update_last (len last) last st.

Definition poly1305_finish (st : (FieldElement_t × FieldElement_t × PolyKey_t)) : Poly1305Tag_t :=
  let '(acc,_,k) := (st) : (FieldElement_t × FieldElement_t × PolyKey_t) in
  let n := (uint128_from_le_bytes (from_slice k (@repr WORDSIZE32 16) (@repr WORDSIZE32 16))) : U128_t in
  let aby := (to_byte_seq_le acc) : Seq_t U8_t in
  let a := (uint128_from_le_bytes (from_slice aby (@repr WORDSIZE32 0) (@repr WORDSIZE32 16))) : U128_t in
  from_seq (U128_to_le_bytes (a.+n)).

Definition poly1305 (m : Seq_t U8_t) (key : PolyKey_t) : Poly1305Tag_t :=
  let st := (poly1305_init key) : (FieldElement_t × FieldElement_t × PolyKey_t) in
  let st := (poly1305_update m st) : (FieldElement_t × FieldElement_t × PolyKey_t) in
  poly1305_finish st.
