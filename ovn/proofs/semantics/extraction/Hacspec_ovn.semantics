(* Automatically Generated Functional Semantics *)
Import core prelude rust_2018

(Unimplemented NotImplementedYet)

(Unimplemented NotImplementedYet)

(Unimplemented HaxError)

Type-Definition t_z_17_ := {}

Section t_Group
  Type-Definition group_type := int
  Definition q :=
    17
  Definition g :=
    3
  Definition g_pow :=
    λ x,
    (rem ((bitxor g) x)) q
  Definition pow :=
    λ g x,
    (rem ((bitxor g) x)) q
  Definition one :=
    1
  Definition prod :=
    λ x y,
    (rem ((mul x) y)) q
  Definition inv :=
    λ x,
    let res := 0 in
    let res := ((fold (into_iter Range[f_start := 1][f_end := q])) res) (λ res i,
    (λ true,
    let res := i in
    res
    | false,
    res) ((eq (g_pow i)) x)) in
    res
  Definition div :=
    λ x y,
    (prod x) (inv y)
  End t_Group

Type-Definition t_G := t_z_17__t

Definition n :=
  λ (), 20

Type-Definition t_OvnContractState := {f_g_pow_xis : _ array<20>; f_zkp_xis : int array<20>; f_commit_vis : int array<20>; f_g_pow_xi_yi_vis : _ array<20>; f_zkp_vis : int array<20>; f_tally : int}

Definition init_ovn_contract :=
  λ (ctx : T),
  Result_Ok OvnContractState[f_g_pow_xis := (repeat one) 20][f_zkp_xis := (repeat 0) 20][f_commit_vis := (repeat 0) 20][f_g_pow_xi_yi_vis := (repeat one) 20][f_zkp_vis := (repeat 0) 20][f_tally := 0]

Definition select_private_voting_key :=
  λ (random : int),
  (rem random) q

Definition v_ZKP :=
  λ (g_pow_xi : int) (xi : int),
  0

Type-Definition t_RegisterParam := {f_rp_i : int; f_rp_xi : int}

Definition register_vote :=
  λ (ctx : T) (state : t_OvnContractState_t),
  Result_Ok (accept,state)is2

Type-Definition t_CastVoteParam := {f_cvp_i : int; f_cvp_xi : int; f_cvp_vote : bool}

Definition check_valid :=
  λ (zkp : int),
  true

Definition compute_group_element_for_vote :=
  λ (i : int) (xi : int) (vote : bool) (xis : int array<20>),
  let prod1 := one in
  let prod1 := ((fold (into_iter Range[f_start := 0][f_end := cast ((sub i) 1)])) prod1) (λ prod1 j,
  (prod prod1) ((index xis) j)) in
  let prod2 := one in
  let prod2 := ((fold (into_iter Range[f_start := cast ((add i) 1)][f_end := n])) prod2) (λ prod2 j,
  (prod prod2) ((index xis) j)) in
  let Yi := (div prod1) prod2 in
  (prod ((pow Yi) xi)) (g_pow ((λ true,
  1
  | false,
  0) vote))

Definition commit_to :=
  λ (x : int),
  0

Definition commit_to_vote :=
  λ (ctx : impl HasReceiveContext) (state : t_OvnContractState_t),
  Result_Ok (accept,state)is2

Definition v_ZKP_one_out_of_two :=
  λ (g_pow_vi : int) (vi : bool),
  32

Definition cast_vote :=
  λ (ctx : impl HasReceiveContext) (state : t_OvnContractState_t),
  Result_Ok (accept,state)is2

Definition check_valid2 :=
  λ (g_pow_xi_yi_vi : int) (zkp : int),
  true

Definition check_commitment :=
  λ (g_pow_xi_yi_vi : int) (zkp : int),
  true

Type-Definition t_TallyParameter := {}

Definition tally_votes :=
  λ (_ : impl HasReceiveContext) (state : t_OvnContractState_t),
  Result_Ok (accept,state)is2
